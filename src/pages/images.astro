---
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi 360 Projective Texturing</title>
  </head>
  <body>
    <!-- Include three.js -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script> -->
    <!-- Include the main JavaScript file -->
    <!-- <script src="main.js"></script> -->
  </body>
</html>


<script>
        import * as THREE from "../scripts/three";
    import { PointerLockControls } from "../scripts/three/examples/jsm/controls/PointerLockControls.js";
    import { OrbitControls } from "../scripts/three/examples/jsm/controls/OrbitControls.js";
    import { GLTFLoader } from "../scripts/three/examples/jsm/loaders/GLTFLoader.js";
    import { FBXLoader } from "../scripts/three/examples/jsm/loaders/FBXLoader";
    import { GLTFExporter } from "../scripts/three/examples/jsm/exporters/GLTFExporter.js";
    import { DRACOLoader } from "../scripts/three/examples/jsm/loaders/DRACOLoader.js";
    // main.js

// main.js

// Wrap everything in an IIFE to avoid polluting the global namespace.
(function() {
  // --- 1. Setup the Scene, Camera, and Renderer ---
  const scene = new THREE.Scene();

  // Create a perspective camera.
  const camera = new THREE.PerspectiveCamera(
    60, window.innerWidth / window.innerHeight, 0.1, 1000
  );
  camera.position.set(0, 2, 10);

  // Create the WebGL renderer and add it to the DOM.
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // --- 2. Load the 360° Equirectangular Textures ---
  const textureLoader = new THREE.TextureLoader();
  // Replace these paths with the actual paths to your 360° images.
  const texture1 = textureLoader.load('/balcony-1.png');
  const texture2 = textureLoader.load('/balcony-2.png');

  // --- 3. Define the Projector Data ---
  // Each projector has a position, a forward (look) direction, a field-of-view (as a half-angle in radians), and a texture.
  const projectors = [
    {
      position: new THREE.Vector3(0, 0, 0),
      forward: new THREE.Vector3(-1, 0, 0),
      fov: THREE.MathUtils.degToRad(60), // 60° half-angle FOV
      texture: texture1
    },
    {
      position: new THREE.Vector3(-5, 2, 0),
      forward: new THREE.Vector3(1, 0, 0),
      fov: THREE.MathUtils.degToRad(60),
      texture: texture2
    },
    // Add more projectors if desired.
  ];
  const NUM_PROJECTORS = projectors.length;

  // --- 4. Create the Shader Material with Projective Texturing and Lighting ---
  const multiProjectorMaterial = new THREE.ShaderMaterial({
    uniforms: {
      // Projector-related uniforms.
      numProjectors: { value: NUM_PROJECTORS },
      projectorPositions: { value: projectors.map(p => p.position) },
      projectorForwards: { value: projectors.map(p => p.forward) },
      projectorFOVs: { value: projectors.map(p => p.fov) },
      projectiveTextures: { value: projectors.map(p => p.texture) },
      
      // Lighting uniforms.
      lightDirection: { value: new THREE.Vector3(0.5, 0.8, 0.2).normalize() },
      lightColor: { value: new THREE.Color(1, 1, 1) },
      ambientLight: { value: new THREE.Color(0.3, 0.3, 0.3) },
    },
    vertexShader: `
      varying vec3 vWorldPosition;
      varying vec3 vNormal;

      void main() {
        // Compute the world-space position of the vertex.
        vec4 worldPos = modelMatrix * vec4(position, 1.0);
        vWorldPosition = worldPos.xyz;
        
        // Transform and normalize the vertex normal.
        vNormal = normalize(normalMatrix * normal);
        
        // Standard transformation.
        gl_Position = projectionMatrix * viewMatrix * worldPos;
      }
    `,
    fragmentShader: `
      precision mediump float;

      // Maximum number of projectors; adjust if you need more.
      #define MAX_PROJECTORS 4

      // Projector uniforms.
      uniform int numProjectors;
      uniform vec3 projectorPositions[MAX_PROJECTORS];
      uniform vec3 projectorForwards[MAX_PROJECTORS];
      uniform float projectorFOVs[MAX_PROJECTORS];
      uniform sampler2D projectiveTextures[MAX_PROJECTORS];

      // Lighting uniforms.
      uniform vec3 lightDirection;
      uniform vec3 lightColor;
      uniform vec3 ambientLight;

      varying vec3 vWorldPosition;
      varying vec3 vNormal;

      const float PI = 3.14159265359;

      void main(){
        vec4 colorAccum = vec4(0.0);
        float totalWeight = 0.0;

        // Loop over each projector.
        for (int i = 0; i < MAX_PROJECTORS; i++){
          if (i >= numProjectors) break;
          
          // Compute the normalized direction from the current projector to the fragment.
          vec3 dir = normalize(vWorldPosition - projectorPositions[i]);
          
          // Compute the cosine of the angle between the projector's forward vector and the direction.
          float cosAngle = dot(normalize(projectorForwards[i]), dir);
          
          // If the fragment is outside the projector's cone, skip it.
          if (cosAngle < cos(projectorFOVs[i])) continue;
          
          // Compute a weight based on how centered the fragment is within the cone.
          float weight = (cosAngle - cos(projectorFOVs[i])) / (1.0 - cos(projectorFOVs[i]));
          
          // Convert the direction vector into spherical coordinates for equirectangular mapping.
          float u = atan(dir.z, dir.x) / (2.0 * PI) + 0.5;
          float v = asin(dir.y) / PI + 0.5;
          
          // Sample the texture using the computed UV coordinates.
          vec4 projColor = texture2D(projectiveTextures[i], vec2(u, v));
          
          // Accumulate the weighted projector color.
          colorAccum += projColor * weight;
          totalWeight += weight;
        }
        
        // If at least one projector contributed, compute the average color.
        vec4 projFinalColor = (totalWeight > 0.0) ? (colorAccum / totalWeight) : vec4(0.0, 0.0, 0.0, 1.0);

        // --- Lighting Calculation ---
        float diffuse = max(dot(normalize(vNormal), normalize(lightDirection)), 0.0);
        vec3 lighting = ambientLight + lightColor * diffuse;
        
        projFinalColor.rgb *= lighting;

        gl_FragColor = projFinalColor;
      }
    `,
    transparent: true,
  });

  // --- 5. Create a Mesh and Apply the Shader Material ---
  // For demonstration, we use a box geometry.
  const geometry = new THREE.BoxGeometry(0, 0, 0);
  const mesh = new THREE.Mesh(geometry, multiProjectorMaterial);
  scene.add(mesh);

  // Add helper grid and axes for scene orientation.
  const gridHelper = new THREE.GridHelper(20, 20);
  scene.add(gridHelper);
  const axesHelper = new THREE.AxesHelper(5);
  scene.add(axesHelper);

  // --- 6. Setup Controls and Locomotion ---
  // Use PointerLockControls for a first-person view.
  // Make sure you have included PointerLockControls.js from three.js examples.
  const controls = new PointerLockControls(camera, document.body);

  // Click on the page to lock the pointer and enable mouse-look.
  document.body.addEventListener('click', function() {
    controls.lock();
  }, false);

  // Add the controls' object (which holds the camera) to the scene.
  scene.add(controls.getObject());

  // Keyboard input tracking.
  const keys = {};
  document.addEventListener('keydown', (event) => {
    keys[event.code] = true;
  });
  document.addEventListener('keyup', (event) => {
    keys[event.code] = false;
  });

  // Create a clock for timing.
  const clock = new THREE.Clock();

  // --- 7. Animation Loop ---
  function animate() {
    requestAnimationFrame(animate);

    // Calculate time elapsed.
    const delta = clock.getDelta();
    const moveSpeed = 5 * delta; // 5 units per second

    // Update locomotion only if pointer lock is enabled.
    if (controls.isLocked === true) {
      // Get the camera's forward direction (ignore vertical component for horizontal movement).
      const forward = new THREE.Vector3();
      camera.getWorldDirection(forward);
      forward.y = 0;
      forward.normalize();

      // Compute right vector.
      const right = new THREE.Vector3();
      right.crossVectors(forward, camera.up).normalize();

      // Update position based on WASD keys.
      if (keys['KeyW']) {
        controls.getObject().position.addScaledVector(forward, moveSpeed);
      }
      if (keys['KeyS']) {
        controls.getObject().position.addScaledVector(forward, -moveSpeed);
      }
      if (keys['KeyA']) {
        controls.getObject().position.addScaledVector(right, -moveSpeed);
      }
      if (keys['KeyD']) {
        controls.getObject().position.addScaledVector(right, moveSpeed);
      }
      // Optional vertical movement:
      if (keys['Space']) { // Move up
        controls.getObject().position.y += moveSpeed;
      }
      if (keys['ShiftLeft']) { // Move down
        controls.getObject().position.y -= moveSpeed;
      }
    }

    // (Optional) Rotate the mesh for a dynamic view.
    mesh.rotation.y += 0.005;
    mesh.rotation.x += 0.003;

    // If your projector positions are dynamic, update them here.
    multiProjectorMaterial.uniforms.projectorPositions.value = projectors.map(p => p.position);

    renderer.render(scene, camera);
  }
  animate();

  // --- 8. Handle Window Resizing ---
  window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
  });
})();

</script>
