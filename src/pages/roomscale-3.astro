---
import ObjectList from "../components/object-list.tsx";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Three.js - Three Sides of a Cube</title>
    </head>
    <body id="drop-zone">
        <div class="ui-area" id="ui-area">
            <button id="log-scene"> Log Scene </button>
            <button id="x-flip"> X-Axis </button>
            <button id="y-flip"> Y-Axis </button>
            <button id="z-flip"> Z-Axis </button>
            <button id="y-up"> Y-Up Toggle </button>
            <input type="checkbox" id="center-csv" name="center-csv">
            <label for="center-csv">Center</label>
            <input type="range" id="scale-slider" name="scale-slider" min="-5" max="5" step="0.1" value="1">
            <label for="scale-slider">Scale</label>
            <ObjectList client:load />
            <button id="export-all-fbx">Export All To GLB</button>
        </div>

        <div class="notification-panel" id="notification-panel">
        </div>
        
        <div id="tag">
            <h3 id="label">-</h3>
        </div>
    </body>
</html>

<script>
    import * as THREE from "../scripts/three";
    import { OrbitControls } from "../scripts/three/examples/jsm/controls/OrbitControls.js";
    import { GLTFLoader } from "../scripts/three/examples/jsm/loaders/GLTFLoader.js";
    import { FBXLoader } from "../scripts/three/examples/jsm/loaders/FBXLoader";
    import { GLTFExporter } from "../scripts/three/examples/jsm/exporters/GLTFExporter.js";
    

    const scene = new THREE.Scene();
    var imageArray = []
    var VRRef = []
    var VRSpheres = []
    var objects = []
    var markers = []

    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.autoClear=false;
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    //Manipulatable Group
    var m_Group;

    //Axis
    const axesHelper = new THREE.AxesHelper(5);
    scene.add(axesHelper);

    //Lights
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
    scene.add(directionalLight);

    const light = new THREE.AmbientLight(0x404040);
    scene.add(light);

    //Camera
    const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000,
    );
    camera.position.x = -210.41;
    camera.position.y = 1.31;
    camera.position.z = 0;

    //Mouse Raycaster
    const raycaster = new THREE.Raycaster();
    const pointer = new THREE.Vector2();

    function onPointerMove(event) {
        pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
        pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;
    }

    function showWireframe(scene, boolean) {
        scene.traverse((object) => {
            if (object.isMesh && object.material) {
                if (Array.isArray(object.material)) {
                    object.material.forEach((material) => {
                        material.wireframe = boolean;
                        material.needsUpdate = true;
                    });
                } else {
                    object.material.wireframe = boolean;
                    object.material.needsUpdate = true;
                }
            }
        });
    }

    function moveTo(event) {
        const intersects = raycaster.intersectObjects(scene.children);
        let objectPosition = intersects.filter(
                (item) => item.object.cameraPos && item.object.parent.visible
            );
        let spheresSpawned = VRRef.map((e) => e.uuid)
        console.log(spheresSpawned)
        if(!spheresSpawned.includes(objectPosition[0].object.uuid)){
            if (intersects.length > 0) {
            if (objectPosition.length > 0) {
                camera.position.x = objectPosition[0].object.position.x
                camera.position.y = objectPosition[0].object.position.y
                camera.position.z = objectPosition[0].object.position.z
                console.log(objectPosition[0].object.name)
                // camera.rotation.x = objectPosition[0].object.rotation.x
                // camera.rotation.y = objectPosition[0].object.rotation.y
                // camera.rotation.z = objectPosition[0].object.rotation.z

                // Load 360 texture
                if(imageArray.length > 0){
                    imageArray.forEach((e) => {
                        const targetImage = e.name.includes(objectPosition[0].object.name) && !VRRef.includes(objectPosition[0].object.name) ? e.image : null
                        if (targetImage){
                            
                            const textureLoader = new THREE.TextureLoader();
                            console.log(e.image)
                            // convert binary data to base64 encoded string
                            // const base64Image = new Buffer.from(targetImage).toString('base64');

                            // // Get image file extension
                            // const ext = e.name.split('.').pop();

                            // // complete data URI
                            // const uri = `data:image/${ext};base64,${base64Image}`;
                            textureLoader.load(e.image, function(texture) {
                                console.log("Loading texture:", targetImage);
                                
                                // Create geometry and material for the sphere
                                const geometry = new THREE.SphereGeometry(1, 60, 40);
                                geometry.scale(-1, 1, 1); // Invert the sphere to view from inside
                                const material = new THREE.MeshBasicMaterial({ map: texture });
                                
                                // Create the sphere mesh
                                const sphere = new THREE.Mesh(geometry, material);
                                
                                // Set the sphere's position to match the object's position
                                sphere.position.copy(objectPosition[0].object.position);
                                sphere.rotation.copy(objectPosition[0].object.rotation);
                                sphere.renderOrder = 100
                                
                                
                                // Add the sphere to the scene
                                scene.add(sphere);
                                VRRef.push(objectPosition[0].object.name)
                                VRSpheres.push(sphere)
                                console.log(VRRef)
                                console.log("Sphere added at position:", sphere.position);
                            });
                        }
                    

                    })
                }


                showWireframe(scene, true);
                VRSpheres.forEach((e) => {
                    showWireframe(e, false);
                })
            }
            

        } else {
            showWireframe(scene, false);
        }
        }



    }

    window.addEventListener("pointermove", onPointerMove);

    window.addEventListener("click", moveTo);

    

    //Controls
    const orbitalControls = new OrbitControls(camera, renderer.domElement);

    //Action!!
    function animate() {
        
        raycaster.setFromCamera(pointer, camera);
        const intersects = raycaster.intersectObjects(scene.children);
        var label = document.getElementById("label");
        label.innerHTML = "";

        //Default Tag State
        document.getElementById("tag").style.display = "none";
        if (intersects.length > 0) {
            document.getElementById("tag").style.display = "flex";
            document.getElementById("tag").style.flexDirection = "column";
            
            var idLabel = document.createElement("p");
            var detailLabel = document.createElement("p");
            let positionObjects = intersects.filter(
                (item) => item.object.cameraPos && item.object.parent.visible
            );

            if (positionObjects.length > 0) {
                console.log(positionObjects[0])
                idLabel.innerText = `ID: ${positionObjects[0].object.name}`;
                idLabel.style.color = "#007700";
                label.append(idLabel);

                detailLabel.innerText = `Pos: ${positionObjects[0].object.position.x} ${positionObjects[0].object.position.y} ${positionObjects[0].object.position.z}`;
                detailLabel.style.color = "#007700";
                label.append(detailLabel);
            }
        }

        requestAnimationFrame(animate);
        renderer.clear();
        orbitalControls.update();
        VRSpheres.forEach((e) => {
            
            renderer.render(e, camera);
        })
        renderer.clearDepth();
        renderer.render(scene, camera);

        objects.forEach((e) => {
            renderer.clearDepth();
            renderer.render(e, camera);
        })
        markers.forEach((e) => {
            renderer.clearDepth();
            renderer.render(e, camera);
        })
        


    }
    animate();

    //Tag
    document.addEventListener("mousemove", (e) => {
        document.getElementById("tag").style.left = `${e.x}px`;
        document.getElementById("tag").style.top = `${e.y}px`;
        document.getElementById("tag").style.transform = `translate(${
            (e.clientX / window.innerWidth) * -100
        }%, ${(e.clientY / window.innerHeight) * -150}%)`;
    });

    const fbxFiles = [];
    const glbFiles = [];
    const csvGroups = [];
    const simplifiedNamesId = [];

    //File Drop
    function handleDrop(event) {
        event.preventDefault();
        const items = event.dataTransfer.items;
        const files = event.dataTransfer.files;

        // for (const item of items) {
        //         const entry = item.webkitGetAsEntry();
        //         if (entry.isDirectory) {
        //             readDirectory(entry);
        //         } else {
        //             alert('Please drop a folder.');
        //         }
        //     }
        

        // Check if a single item is dropped
        if (items.length === 1) {
            const entry = items[0].webkitGetAsEntry(); // Use webkitGetAsEntry for better folder support
            const file = files[0];
            console.log(items)
            if (entry.isDirectory) {
                    enumerateDirectoryWithManyFiles(entry);
            } else if (file.type === "text/csv" || file.name.endsWith(".csv")) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    processCSVData(e.target.result, file.name);
                };
                reader.readAsText(files[0]);
            } else if (file.type === "model/gltf-binary" || file.name.endsWith(".glb")) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const arrayBuffer = event.target.result;
                    const loader = new GLTFLoader();
                    loader.parse(arrayBuffer, "", (gltf) => {
                        applyLitMaterialToGLTF(gltf.scene);
                        gltf.scene.name = file.name;
                        objects.push(gltf.scene)
                        simplifiedNamesId.push({uuid: gltf.scene.uuid, simplifiedName: file.name.replace(/\D/g, "")});
                        scene.add(gltf.scene);
                    });
                };
                reader.readAsArrayBuffer(file);
            }
        } else if (files.length === 1) {
            const file = files[0];
            if (file.type === "text/csv" || file.name.endsWith(".csv")) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    processCSVData(e.target.result, file.name);
                };
                reader.readAsText(files[0]);
            } else if (file.type === "model/gltf-binary" || file.name.endsWith(".glb")) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const arrayBuffer = event.target.result;
                    const loader = new GLTFLoader();
                    loader.parse(arrayBuffer, "", (gltf) => {
                        applyLitMaterialToGLTF(gltf.scene);
                        gltf.scene.name = file.name;
                        objects.push(gltf.scene)
                        simplifiedNamesId.push({uuid: gltf.scene.uuid, simplifiedName: file.name.replace(/\D/g, "")});
                        scene.add(gltf.scene);
                    });
                };
                reader.readAsArrayBuffer(file);
            } else {
                console.error("Dropped item could not be accessed.");
            }
        } else if (files.length > 1) {
            const file = files[0];
            if (file.type === "text/csv" || file.name.endsWith(".csv")) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    processCSVData(e.target.result, file.name);
                };
                reader.readAsText(files[0]);
            } else if (file.type === "model/gltf-binary" || file.name.endsWith(".glb")) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const arrayBuffer = event.target.result;
                    const loader = new GLTFLoader();
                    loader.parse(arrayBuffer, "", (gltf) => {
                        applyLitMaterialToGLTF(gltf.scene);
                        gltf.scene.name = file.name;
                        objects.push(gltf.scene)
                        simplifiedNamesId.push({uuid: gltf.scene.uuid, simplifiedName: file.name.replace(/\D/g, "")});
                        scene.add(gltf.scene);
                    });
                };
                reader.readAsArrayBuffer(file);
            } else if (file.type === "image/jpg" || file.name.endsWith(".jpg")) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const arrayBuffer = event.target.result;
                    const loader = new GLTFLoader();
                    loader.parse(arrayBuffer, "", (gltf) => {
                        applyLitMaterialToGLTF(gltf.scene);
                        gltf.scene.name = file.name;
                        simplifiedNamesId.push({uuid: gltf.scene.uuid, simplifiedName: file.name.replace(/\D/g, "")});
                        scene.add(gltf.scene);
                    });
                };
                reader.readAsDataURL(file);
            } else {
                console.error("Dropped item could not be accessed.");
            }
        } else {
            // console.log(items)
            // console.error("Please drop only one item.");
        }
    }

    function applyLitMaterialToGLTF(gltfScene) {
        const material = new THREE.MeshStandardMaterial({
            color: 0x00ff00, // Set your desired color
            wireframe: false, // Default to wireframe off
        });

        gltfScene.traverse((child) => {
            if (child.isMesh) {
                child.material = material;
                child.material.wireframe = false; // Ensure wireframe is initially false
            }
        });
    }

    async function enumerateDirectoryWithManyFiles(directoryEntry) {
        //Workaround because readEntries only reads 100 files
        let reader = directoryEntry.createReader();
        let resultEntries = [];

        let read = async function () {
            let entries = await traverseDirectoryAsync(reader);
            if (entries.length > 0) {
                resultEntries = resultEntries.concat(entries);
                await read();
            }
        };

        await read();
        return resultEntries;
    }

    function getGrandparent(entry) {
        return new Promise((resolve, reject) => {
            entry.getParent(
                (parent) => {
                    parent.getParent(
                        (grandparent) => {
                            resolve(grandparent.name);
                        },
                        (error) => {
                            reject(error);
                        },
                    );
                },
                (error) => {
                    reject(error);
                },
            );
        });
    }
    //Traverse File Tree Workaround because readEntries only reads 100 files
    function traverseDirectoryAsync(reader) {
        return new Promise((resolve, reject) => {
            reader.readEntries(
                (entries) => {
                    var objectCount = 0;

                    entries.forEach((entry) => {
                        if (entry.isFile && entry.name.endsWith(".fbx")) {
                            entry.file((file) => {
                                objectCount++;
                                const tempCount = objectCount;
                                const reader = new FileReader();
                                reader.readAsArrayBuffer(file);
                                reader.onload = (event) => {
                                    const arrayBuffer = event.target.result;
                                    const loader = new FBXLoader();
                                    const item = loader.parse(arrayBuffer, "");
                                    var currentObject;
                                    getGrandparent(entry)
                                        .then((grandparentName) => {
                                            item.unitName = grandparentName;
                                            item.name = entry.name;
                                            currentObject = {
                                                fileName: entry.name,
                                                unitName: grandparentName,
                                            };
                                            const csvObject = csvGroups.find(x => x.userData.simplifiedName === grandParent);
                                            var newObject = {uuid: item.uuid, simplifiedName: grandparentName, csvObject: csvObject ? csvObject : ""}
                                            simplifiedNamesId.push(newObject)
                                            fbxFiles.push(currentObject);

                                            const fileUploadEvent =
                                                new CustomEvent("file-upload", {
                                                    detail: currentObject,
                                                });
                                            window.dispatchEvent(
                                                fileUploadEvent,
                                            );
                                        })
                                        .catch((error) =>
                                            console.error(
                                                "Error fetching grandparent:",
                                                error,
                                            ),
                                        );

                                    scene.add(item);
                                };
                            });
                        } else if (
                            entry.isFile &&
                            entry.name.endsWith(".glb")
                        ) {
                            glbFiles.push(entry);
                            entry.file((file) => {
                                objectCount++;
                                const tempCount = objectCount;
                                const reader = new FileReader();
                                reader.readAsArrayBuffer(file);
                                reader.onload = (event) => {
                                    const arrayBuffer = event.target.result;
                                    const loader = new GLTFLoader();
                                    const item = loader.parse(arrayBuffer, "");
                                    item.name = entry.name;
                                    simplifiedNamesId.push({uuid: item.uuid, simplifiedName: entry.name.replace(/\D/g, "")})
                                    glbFiles.push(item.name);
                                    scene.add(item);
                                };
                            });
                        } else if (
                            entry.isFile &&
                            entry.name.endsWith(".csv")
                        ) {
                            entry.file((file) => {
                                const reader = new FileReader();
                                reader.onload = (e) => {
                                    processCSVData(e.target.result, file.name);
                                };
                                reader.readAsText(file);
                            });
                        } else if (
                            entry.isFile &&
                            entry.name.endsWith(".jpg")
                        ) {
                            entry.file((file) => {
                                const reader = new FileReader();
                                reader.onload = (e) => {
                                    processVRImage(e.target.result, file.name);
                                };
                                reader.readAsDataURL(file);
                            });
                        } else if (entry.isDirectory) {
                            const subReader = entry.createReader();
                            traverseDirectoryAsync(subReader); // Recursive call
                        }
                    });
                    resolve(entries);
                },
                (error) => reject(error),
            );
        });
    }

// Function to export a Three.js object to a GLB file
function exportToGLB(object, filename) {
    const exporter = new GLTFExporter();
    exporter.parse(
        object,
        (result) => {
            let blob;
            if (result instanceof ArrayBuffer) {
                blob = new Blob([result], { type: 'application/octet-stream' });
            } else if (typeof result === 'object') {
                blob = new Blob([JSON.stringify(result)], { type: 'application/json' });
            } else {
                console.error('Unexpected result type:', result);
                return;
            }

            saveBlob(blob, filename);
        },
        (error) => {
            console.error('An error occurred during the GLB export', error);
        },
        { binary: true } // Options object with binary set to true
    );
}

// Function to save the Blob as a file
function saveBlob(blob, filename) {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.style.display = 'none';
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();

    // Clean up
    setTimeout(() => {
        URL.revokeObjectURL(url);
        document.body.removeChild(link);
    }, 100);
}

// Function to export all FBX files in fbxFiles array
function exportAllFBXFilesToGLB() {
    fbxFiles.forEach((fbxFile, index) => {
        const object = scene.getObjectByName(fbxFile.fileName);
        if (object) {
            const filename = `${fbxFile.fileName.split('.')[0]}.glb`;
            exportToGLB(object, filename);
        }
    });
}

// Add an event listener to the export button
const exportButton = document.getElementById("export-all-fbx");
exportButton.addEventListener("click", exportAllFBXFilesToGLB);

    const logScene = document.getElementById("log-scene");
    logScene.addEventListener("click", (e) => {
        console.log(scene);
    });
    const dropZone = document.getElementById("drop-zone");
    dropZone.addEventListener("drop", handleDrop);
    document.body.addEventListener("dragover", (e) => {
        event.preventDefault();
    });

    function createSphere(name, position, rotation) {
        const geometry = new THREE.SphereGeometry(0.5, 32, 16); // Sphere radius set to 1, adjust as needed
        const material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Red color, change as needed
        const sphere = new THREE.Mesh(geometry, material);

        // Set position
        sphere.position.set(position.x, position.y, position.z);

        // Set rotation using Euler angles, converting degrees to radians
        sphere.rotation.set(
            THREE.MathUtils.degToRad(rotation.y),
            THREE.MathUtils.degToRad(rotation.x),
            THREE.MathUtils.degToRad(rotation.z),
        );

        sphere.name = name;

        return sphere;
    }

    function createCone(name, position, rotation) {
        const geometry = new THREE.ConeGeometry(0.5, 1, 32); // Cone with radius 0.5 and height 1
        const material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Red color, change as needed
        const cone = new THREE.Mesh(geometry, material);

        // Set position
        cone.position.set(position.x, position.y, position.z);

        // Set rotation using Euler angles, converting degrees to radians
        cone.rotation.set(
            THREE.MathUtils.degToRad(rotation.x),
            THREE.MathUtils.degToRad(rotation.y),
            THREE.MathUtils.degToRad(rotation.z),
        );
        console.log(cone.rotation)
        cone.renderOrder = 0
        cone.name = name;
        markers.push(cone)
        return cone;
    }

    // Function to create a CSV from sphere groups and trigger download
function createCSVFromSphereGroups(csvGroups) {
    let csvContent = ""; // CSV header

    csvGroups.forEach(group => {
        group.children.forEach(child => {
            if (child instanceof THREE.Mesh) { // Ensure child is a mesh (sphere)
                const name = child.name;
                const worldPosition = new THREE.Vector3()
                const worldQuaternion = new THREE.Quaternion()
                const worldEuler = new THREE.Euler();
                const position = child.getWorldPosition(worldPosition);
                const rotation = child.getWorldQuaternion(worldQuaternion);
                worldEuler.setFromQuaternion(worldQuaternion);
                
                csvContent += `${name},${worldPosition.x},${-worldPosition.y},${worldPosition.z},${worldEuler.x},${worldEuler.y},${worldEuler.z}\n`;
            }
        });
        
        // Create a downloadable CSV file
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${group.name.split(".")[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    });
}

//Calculate center of all CSV points
function calculateGroupCenter(group) {
    const positions = group.children.map(child => child.position);
    const totalPositions = positions.length;

    if (totalPositions === 0) return null;

    const sum = positions.reduce((acc, pos) => {
        acc.x += pos.x;
        acc.y += pos.y;
        acc.z += pos.z;
        return acc;
    }, { x: 0, y: 0, z: 0 });

    return {
        x: sum.x / totalPositions,
        y: sum.y / totalPositions,
        z: sum.z / totalPositions,
    };
}

function translateGroupToOrigin(group) {
    const center = calculateGroupCenter(group);
    group.initPosition = new THREE.Vector3(-center.x, -center.y, -center.z)
    if (!center) return;

    group.position.set(-center.x, -center.y, -center.z);
}

function alert(type, message){
    var el = document.createElement('div')
    el.style.background = "#ffffff88"
    el.style.padding = "20px"
    el.style.borderRadius = "15px"
    el.classList.add('notification')
    var text = document.createElement('p')
    if(type == "error"){
        el.classList.add('alert-error')
    } else if(type == "notify"){
        el.classList.add('alert-notify')
    }
    text.innerText = message;
    text.style.margin = "0px"
    el.appendChild(text);
    
    document.getElementById('notification-panel').appendChild(el)

    setTimeout((e) => {
        el.remove()
    }, 2000)
}

// Function to scale each point relative to the center point of the group
function scaleGroupRelativeToCenter(group, scaleFactor) {
    
    m_Group.scale.set(scaleFactor, scaleFactor, scaleFactor)
    if(!m_Group.initPosition){
        m_Group.initPosition = new THREE.Vector3(m_Group.position.x, m_Group.position.y, m_Group.position.z)
    }
    m_Group.position.set(m_Group.initPosition.x * scaleFactor, m_Group.initPosition.y * 1, m_Group.initPosition.z * scaleFactor)
    var center = group.position
     group.children.forEach(child => {
         child.scale.set(1 / scaleFactor, 1 / scaleFactor, 1 / scaleFactor)
     });
}

function convertFBXtoGLB(position, rotation) {
    // Assuming FBX is Y-up and GLB is Z-up
    // Convert position
    const convertedPosition = {
        x: position.x,
        y: position.z,
        z: -position.y,
    };

    // Convert rotation (assuming Euler angles)
    const convertedRotation = {
        x: rotation.x,
        y: rotation.z,
        z: -rotation.y,
    };

    return { position: convertedPosition, rotation: convertedRotation };
}



    // Function to process CSV data and create spheres
    function processCSVData(csvText, name?) {
        const lines = csvText.split("\n"); // Split CSV text into lines
        // Skip the first line if it contains headers, and process the rest

        const group = new THREE.Group();

        for (let i = 1; i < lines.length; i++) {
            const row = lines[i].split(",");
            if (row.length >= 7) {
                const name = row[0];
                const position = {
                    x: parseFloat(row[1]),
                    y: parseFloat(row[2]),
                    z: parseFloat(row[3]),
                };
                const rotation = {
                    x: parseFloat(row[4]),
                    y: parseFloat(row[5]),
                    z: parseFloat(row[6]),
                };
                console.log(rotation)
                // position.y = position.y * -1;
                // const { position: convertedPosition, rotation: convertedRotation } = convertFBXtoGLB(position, rotation);
                // const sphere = createSphere(name, position, rotation);
                // sphere.cameraPos = true;
                
                // group.add(sphere);
                const cone = createCone(name, position, rotation);
                cone.cameraPos = true;
                
                group.add(cone);
            }

            if(name){
                group.name = name;
                group.userData.simplifiedName = name.replace(/\D/g, "");
            }
            scene.add(group);
            m_Group = group;
        }
        csvGroups.push(group)

        //Update main object references
        if(simplifiedNamesId.length > 0){
            simplifiedNamesId.forEach((e) => {
                if(e.simplifiedName == name.replace(/\D/g, "")){
                    e.csvObject = group.uuid;
                } else {
                    group.remove()
                }
            })
        }
        

            const csvUploadEvent = new CustomEvent('file-upload-csv', {
                detail: {
                    simplifiedName: group.userData.simplifiedName,
                    name: group.name
                },
            })
            window.dispatchEvent(csvUploadEvent)
    }

    function processVRImage(data, name?) {
        const thisImage = {name: name, image: data}
        imageArray.push(thisImage)
    }

    document.getElementById("ui-area").addEventListener("click", (e) => {
        if(!m_Group){
            alert('error', 'Please Import some CSV files to use these features')
        }
    });

    document.getElementById("x-flip").addEventListener("click", (e) => {
        m_Group.rotateOnWorldAxis(
            new THREE.Vector3(1, 0, 0),
            THREE.MathUtils.degToRad(180),
        );
    });

    document.getElementById("y-flip").addEventListener("click", (e) => {
        m_Group.rotateOnWorldAxis(
            new THREE.Vector3(0, 1, 0),
            THREE.MathUtils.degToRad(180),
        );
    });

    document.getElementById("z-flip").addEventListener("click", (e) => {
        m_Group.rotateOnWorldAxis(
            new THREE.Vector3(0, 0, 1),
            THREE.MathUtils.degToRad(180),
        );
    });

    document.getElementById("y-up").addEventListener("click", (e) => {
        m_Group.children.forEach((e) => {
            const initYPos = e.position.y;
            e.position.y = -initYPos;
        });
    });

    document.getElementById("center-csv").addEventListener("change", (e) => {
        if(e.target.checked){
            calculateGroupCenter(m_Group)
            translateGroupToOrigin(m_Group)
            alert('notify', 'csv-centered')
        } else {
            m_Group.position.set(0, 0, 0)
            alert('notify', 'csv-centered')
        }
    });

    document.getElementById("scale-slider").addEventListener("input", (e) => {
        scaleGroupRelativeToCenter(m_Group, e.target.value)
    });

    window.addEventListener('export-csv', (e) => {
        createCSVFromSphereGroups([m_Group]);
    })

    window.addEventListener('object-switch', (e) => {
        csvGroups.forEach((e) => {
            e.visible = false
        })
        fbxFiles.forEach((e) => {
            e.visible = false
        })
        simplifiedNamesId.forEach((i) => {
            if(i.simplifiedName == e.detail){
                console.log(i.csvObject)
                scene.getObjectByProperty('uuid', i.uuid).visible = true;
            if(i.csvObject){
                const csvObj = scene.getObjectByProperty('uuid', i.csvObject);
                csvObj.visible = true;
                csvObj.children.forEach((j) => {
                    j.visible = true
                })
                m_Group = scene.getObjectByProperty('uuid', i.csvObject);
            }

            } else {
                
                    scene.getObjectByProperty('uuid', i.uuid).visible = false;
                    if(i.csvObject){
                        const csvObj = scene.getObjectByProperty('uuid', i.csvObject);
                        csvObj.visible = false;
                        csvObj.children.forEach((j) => {
                            j.visible = false;
                        })
                    }
            } 
        })
    })

    window.addEventListener( 'resize', onWindowResize, false );

    function onWindowResize(){
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }
</script>

<style>
    html {
        min-height: 100vh;
        width: 100%;
        margin: 0%;
    }

    body {
        /* min-height: 100vh;
        width: 100%;
        margin: 0%; */
        max-width: 100vw;
        display: flex;
        flex-wrap: wrap;
        min-height: 90vh;
        margin: 0%;
    }

    .ui-area {
        position: fixed;
        height: min-content;
    }

    .notification-panel{
        position: fixed;
        display: flex;
        flex-direction: column;
        right: 0%;
        width: 250px;
        grid-column: auto;
        gap: 10px;
    }

    .notification{
        padding: 0.5em;
        background-color: azure;

    }

    #tag,
    #tag * {
        display: flex;
        position: fixed;
        background-color: #cccccccc;
        padding: 0em 0.5em;
        text-align: left;
        line-height: 0.5em;
        font-family: monospace;
        font-weight: 100;
        justify-content: center;
        min-width: max-content;
        pointer-events: none;
        /* transform: translate(-50%); */
        /* min-height: 50px; */
        height: fit-content;
        border-radius: 6px;
        /* font-family: sans-serif; */
    }
    #label {
        display: flex;
        text-align: center;
        justify-content: center;
        margin: 0%;
        height: 100%;
        font-family: sans-serif;
    }
</style>
