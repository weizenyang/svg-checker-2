---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<!--?xml version="1.0" encoding="UTF-8"?-->
		<main class="toolsets" style="display: flex">
			<div class="toolset-section">
				
				<section class="container">
						<input class="dropdown" id="custom-formatting" name="formatting" type="checkbox" style="display: none"/>
						<label for="custom-formatting">Custom SVG ID Formatting <span class="arrow">^</span></label>

					<div class="toggle">
						<div class="sub-item">
							<input
								type="radio"
								name="data-format"
								class="formatting"
								id="underscore"
								value="underscore"
							/>Underscore on Last Identifier (NHXX-XX<b>_</b>XX)
						</div>

						<div class="sub-item">
							<input
								type="radio"
								name="data-format"
								class="formatting"
								value="dash"
								id="dash"
							/>Dash on Last Identifier (NHXX-XX<b>-</b>XX)
						</div>
						<div class="sub-item">
							<input
								type="radio"
								name="data-format"
								class="formatting"
								value="none"
								id="none"
								checked="checked"
							/>None
						</div>
						<div class="sub-item">
							<input
								type="radio"
								name="data-format"
								class="formatting"
								value="fullUnderscore"
								id="fullUnderscore"
							/>Full Underscore
						</div>
					</div>
				</section>

				<section class="container">
					<!-- <h3>2. Then, Import Files here</h3> -->
					<!-- <button class="button-style">Import </button> -->
					<label for="myFile" class="button-style">Import <svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						strokeLinecap="round"
						strokeLinejoin="round"
					  >
						<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke-width="2"/>
						<polyline points="17 8 12 3 7 8" stroke-width="2"/>
						<line x1="12" x2="12" y1="3" y2="15" stroke-width="2"/>
					  </svg></label>
					<input type="file" class="input-style" id="myFile" name="filename" style="display:none; "/>
					
				</section>

				

				<section class="container" >
					
					<div class="sub-item" style="display: flex; flex-direction: column; margin-bottom: 10px;">
						<p style="padding: 0 0px 10px 0em; margin: 0px;">Edit:</p>
						<div class="button-gap" style="display: flex; width: 100%;">
							<button id="flip-x"> Flip X</button>
							<button id="flip-y"> Flip Y</button>
						</div>
					</div>

					<div class="sub-item" style="display: flex; flex-direction: row; padding: 0px; margin-bottom: 10px">
						<input
							type="text"
							id="myClasses"
							name="filename"
							style="border: 0px; border-right: 1px solid #00000022;"
							class="input-style"
							placeholder="Class Selector (cls-1,cls-2,...)"
						/>
						<button id="remove"
							style="padding: 0.3em 0.5em; border-radius: 0px;">Isolate Item</button
						>
					</div>

					<div class="sub-item" style="display: flex; flex-direction: column; margin-bottom: 10px;">
						<!-- <label for="group">Group:</label> -->
						<input
							id="group"
							oninput="this.value = this.value.toUpperCase()"
							type="text"
							placeholder="Group"
							style="margin-bottom: 10px;"
							class="input-style"
						/>
			
						<!-- <label for="unit">Unit:</label> -->
						<input
							id="unit"
							type="text"
							oninput="this.value = this.value.toUpperCase()"
							placeholder="Unit"
							class="input-style"
						/>
						<div class="button-gap" style="display: flex; margin-top: 10px;">
							<button id="set-name">Set</button>
							<button id="set-unit">Apply Units</button>
						</div>
					</div>

					<div class="sub-item" style="display: flex; flex-direction: column;">

						<input
							id="item-id"
							type="text"
							oninput="this.value = this.value.toUpperCase()"
							placeholder="ID"
							style="margin-top: 10px;"
							class="input-style"
						/>

						<div class="button-gap" style="display: flex; margin-top: 10px;">
							<button id="set-id">Set</button>
						</div>
						
						
					</div>

				</section>

				<section class="container">
					
					<!-- <h3>3. Export reformatted files</h3> -->
					<!-- <button class="button-style">Export 
						<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						strokeLinecap="round"
						strokeLinejoin="round"
					  >
						<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke-width="2"/>
						<polyline points="7 10 12 15 17 10" stroke-width="2"/>
						<line x1="12" x2="12" y1="15" y2="3" stroke-width="2"/>
					  </svg></button> -->

					  <!-- <label for="export-file-name">File Name: </label> -->
					<input type="text" placeholder="File Name" class="input-style" id="export-file-name" style="margin-bottom: 10px"/>
					<!-- <div class="sub-item" style="display: flex; flex-direction: column; position: relative">

						
					</div> -->
					<button id="export" class="button-style" style="margin-bottom: 10px"
					>Export SVG <svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					strokeLinecap="round"
					strokeLinejoin="round"
				  >
					<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke-width="2"/>
					<polyline points="7 10 12 15 17 10" stroke-width="2"/>
					<line x1="12" x2="12" y1="15" y2="3" stroke-width="2"/>
				  </svg></button
				>
				<!-- <button id="remove" class="button-style" style="margin-right: 1em"
					>Remove Data</button
				> -->
				<!-- <button id="export-csv-count" class="button-style" style="margin-right: 1em"
					>Export CSV with Count</button
				> -->

				<!-- <button id="export-csv" class="button-style" style="margin-right: 1em"
					>Export CSV No Count</button
				> -->
				<button id="export-csv-layer" class="button-style" style="margin-bottom: 10px"
					>Export CSV <span style="font-size: 12px; padding: 0.2em; color: #333; background-color: #ccc; border-radius: 3px; margin-left: 8px">4096px</span>
					</button
				>
				<button id="export-csv-layer-2048" class="button-style"
					>Export CSV <span style="font-size: 12px; padding: 0.2em; color: #333; background-color: #ccc; border-radius: 3px; margin-left: 8px">2048px</span></button
				>
				</section>

				<div class="container" id="id-container">
					<div class="id-list-title-container">
						<p
							class="id-list-title"
							style="padding: 0em 0em; font-weight: bold;"
						>
							CTRL + F to look for items
						</p>
						<p class="hide-toggle" id="hide-toggle">^</p>
					</div>
					<ul style="padding-left: 1em;" class="id-list" id="id-list">
					</ul>
				</div>
			</div>
			
		</main>

		<section class="container editor">
			<h3>Viewer</h3>

			<div class="output" id="svg-container">
				<p
					style="padding: 2em; background-color: #00000022; border-radius: 3px; margin: 0px;"
				>
					Import SVG file
				</p>
			</div>

			<div id="tag">
				<h3 id="label">-</h3>
			</div>
			<svg id="svg"></svg>
		</section>
	</body>
</html>

<style>
	@font-face {
		font-family: "gabarito";
		src: url("/Gabarito-VariableFont_wght.ttf");
	}
	* {
		font-family: gabarito, sans-serif;
	}

	button{
		all: unset;
		
		width: 100%;
		display: flex;
		margin: 0px;
		font-size: 12px;
		padding: 0.3em;
		cursor: pointer;
		border-radius: 4px;
		background-color: #FFF;
	}

	button:hover{
		background-color: #ccc;
	}

	body{
		box-sizing: border-box;
		display: grid;
		grid-template-columns: repeat(6, 1fr);

		grid-template-rows: repeat(6, 1fr);
		gap: 10px;
		
		height: 100vh;
		margin: 0%;
		padding: 10px;
	}

	.button-style{
		display: flex;
		cursor: pointer;
		box-sizing: border-box;
		padding: 0.7em;
		width: 100%;
		align-items: center;
		justify-content: center;
		font-size: large;
		color: #eee;
		transition: 0.2s;
		background-color: #333333;
		border-radius: 4px;
	}
	.button-style:hover{
		display: flex;
		cursor: pointer;
		padding: 0.7em;
		align-items: center;
		justify-content: center;
		font-size: large;
		color: #eee;
		
		background-color: #555555;
	}
	.button-style svg{
		padding-left: 1em
	}

	.button-gap :first-child{
		margin: 0em 0.2em;
		margin-left: 0em;
		text-align: center;
		align-items: center;
		justify-content: center;
	}

	.button-gap :last-child{
		margin: 0em 0.2em;
		margin-right: 0em;
		text-align: center;
		align-items: center;
		justify-content: center;
	}

	.button-gap button{
		border: 1px solid #00000022;
		background-color: #333333;
		color: #eee;
		margin: 0em 0.2em;
		text-align: center;
		align-items: center;
		justify-content: center;
	}

	.button-gap button:hover{
		background-color: #888888;
	}

	

	.dropdown ~ .toggle{
		display: none
	}

	.dropdown:checked ~ .toggle{
		display: flex;
		flex-direction: column;
	}

	.dropdown:checked ~ .toggle{
		display: flex;
		flex-direction: column;
	}

	.dropdown ~ label{
		display: flex;
		cursor: pointer;
		align-items: center;
		justify-content: space-between;
		
	}
	.dropdown ~ label .arrow{
		display: flex;
		cursor: pointer;
		font-size: 2em;
		text-align: center;
		
		justify-content: center;
	}

	.dropdown:checked ~ label .arrow{
		transform: rotate(180deg);
		
	}

	h3 {
		margin-top: 0.2em;
	}

	.toolsets {
		width: 100%;
		grid-column: 1 / 1;
		grid-row: 1/7;
	}

	.editor{
		grid-column: 2/7;
		grid-row: 1/7;
	}

	.container {
		box-sizing: border-box;
		/* background-color: #0000000c; */
		border: 0.3px solid #00000022;
		padding: 0.5em;
		width: 100%;
		display: flex;
		flex-direction: column;
		border-radius: 5px;
		-webkit-user-select: none; /* Safari */
		-ms-user-select: none; /* IE 10 and IE 11 */
		user-select: none; /* Standard syntax */
	}

	.input-style{
		all: unset;
		border: 0px solid;
		border-radius: 3px;
		/* background-color: #00000011; */
		transition: box-shadow 0.2s;
		border: solid 0.5px #ddd;
		padding: 0.3em;
	}

	.input-style:focus{
		box-shadow: inset 0px 0px 100px #fff;
		border: solid 1px;
	}

	.toolset-section {
		width: 100%;

		/* padding: 0.5em; */
	}

	.toolset-section .container{
		margin-top: 10px;
	}

	.toolset-section .container:first-child{
		margin-top: 0px;
	}

	#tag, #tag *{
		display: flex;
		position: fixed;
		background-color: #cccccccc;
		padding: 0em 0.5em;
		text-align: left;
		line-height: 0.5em;
		font-family: monospace;
		font-weight: 100;
		justify-content: center;
		min-width: max-content;
		pointer-events: none;
		/* transform: translate(-50%); */
		/* min-height: 50px; */
		height: fit-content;
		border-radius: 6px;
		/* font-family: sans-serif; */
	}
	#label {
		display: flex;
		text-align: center;
		justify-content: center;
		margin: 0%;
		height: 100%;
		font-family: sans-serif;
	}

	.output {
		pointer-events: fill;
	}

	#id-container {
		/* margin-top: 0.5em; */
		background-color: #eee;
		max-height: 390px;
		border-radius: 5px;
		/* position: fixed; */
		right: 0%;
		top: 0%;
		display: flex;
		overflow-y: none;
		list-style: none;
		flex-direction: column;
		/* margin-left: 0.5em; */
	}

	#svg-container {
		border: solid 1px #00000055;
		border-radius: 3px;
		position: relative;
	}

	.hide {
		display: none;
	}



	.svg-tool-selected {
		fill: #ff0000;
	}

	.hovered {
		fill: #ff000066;
	}

	.sub-item {
		padding: 0.5em;
		margin-bottom: 0.1em;
		/* background-color: #00000011; */
		border: 1px solid #00000022;
		border-radius: 3px;
		display: flex;
		/* flex-direction: column; */
	}

	.sub-item [type="radio"]{
		margin-left: 0%;
	}

	.toggle {
		display: flex;
		flex-direction: column;
	}

	.expand {
		transform: rotate(180deg);
	}

	.hide-toggle:hover {
		cursor: pointer;
		text-decoration: underline;
	}

	.id-list {
		margin: 0%;
		overflow-y: scroll;
		min-height: 50px;
	}

	.id-list-title-container {
		display: flex;
		justify-content: space-between;
		padding: 0em 1em;
		background-color: #00000011;
	}

	.id-list-title span:hover {
		cursor: pointer;
		text-decoration: underline;
	}
</style>

<script>
	enum format {
		underscore,
		dash,
		none,
		fullUnderscore,
	}

	var flipped = false;
	var multiSelect = false;
	var clusterId = [];
	
	var idFormat = format.none; //SVG ID format

	var mouseDown = false;
	var globalSvgContainer = document.getElementById('svg-container');
	var tempSelected;

	var formattingButtons = document.querySelectorAll(".formatting");
	formattingButtons.forEach((e) => {
		e.addEventListener("change", (event) => setFormat(event.target.value));
	});

	function setFormat(data) {
		if (data == "underscore") {
			idFormat = format.underscore;
		} else if (data == "dash") {
			idFormat = format.dash;
		} else if (data == "none") {
			idFormat = format.none;
		} else if (data == "fullUnderscore") {
			idFormat = format.fullUnderscore;
		}
	}
	//Attribute Editor
	var groupGlobal = [];

	var fileNameGlobal = "";
	var svg = document.getElementById("svg"); // get the SVG element
	var mouseRect = svg.createSVGRect(); // create a rectangle for the mouse position
	var currentSelected = null;

	document.getElementById("export-file-name").addEventListener('input', (e) => {
		fileNameGlobal = e.target.value
		console.log(fileNameGlobal)
	})
	document.getElementById('svg-container').addEventListener("mouseover", (e) => {
		// console.log(e.parentNode.nodeName.toLowerCase())
		if (
			e.srcElement.parentNode.nodeName.toLowerCase() == "svg" ||
			e.srcElement.nodeName.toLowerCase() == "svg" ||
			e.srcElement.parentNode.nodeName.toLowerCase() == "g" ||
			!e.srcElement.tagName == "image"
		) {
			if (currentSelected != null) {
				currentSelected.classList.remove("hovered");
				if (!currentSelected.classList.contains("svg-tool-selected")) {
					currentSelected.style.fill = "";
				} else {
					currentSelected.style.fill = "#ff0000";
				}
			}
			document.getElementById("tag").style.display = "flex";
			document.getElementById("label").innerHTML = "";
			var label = document.createElement('div')
			if(e.srcElement.id){
				var idLabel = document.createElement('p')
				idLabel.innerText = `ID: ${e.srcElement.id}`
				idLabel.style.color = "#007700"
				label.appendChild(idLabel)
			}

			if(e.srcElement.getAttribute('class')){
				var classLabel = document.createElement('p')
				classLabel.innerText = `Class: ${e.srcElement.getAttribute('class')}`
				label.appendChild(classLabel)
			}
			
			
			document.getElementById("label").append(label)
			currentSelected = e.srcElement;
			e.srcElement.classList.add("hovered");
		} else {
			document.getElementById("tag").style.display = "none";
			// console.log(e.srcElement.parentNode.nodeName);
		}

		document.querySelectorAll(".hovered").forEach((e) => {
			e.style.fill = "#ff000066";
		});
	});
	// document..getElementById('svg-container').addEventListener("click",(e))
	document.getElementById('svg-container').addEventListener("click", (e) => {
		if (
			e.srcElement.parentNode.nodeName.toLowerCase() == "svg" ||
			e.srcElement.nodeName.toLowerCase() == "svg" ||
			e.srcElement.parentNode.nodeName.toLowerCase() == "g"
		) {

			console.log(e.srcElement.id);
			// if (currentSelected != null) {
			// 	currentSelected.classList.add("hovered");
			// }
			document.getElementById("tag").style.display = "flex";
			document.getElementById("label").innerText = e.srcElement.id;
			currentSelected = e.srcElement;

			const groupName = e.srcElement;
			//Get Attributes
			if (!multiSelect) {
				groupGlobal = [];
				document.querySelectorAll(".svg-tool-selected").forEach((e) => {
					// console.log(e.classList)
					e.classList.remove("svg-tool-selected");
					// console.log(e.classList)
					e.style.fill = "";
				});
				groupGlobal.push(groupName);
			} else {
				groupGlobal.push(groupName);
			}

			if (groupGlobal.length < 2) {
				if (groupGlobal[0].getAttribute("group-attribute") != "") {
					document.getElementById("unit").focus();

					document.getElementById("group").value =
						groupGlobal[0].getAttribute("group-attribute");
				} else {
					document.getElementById("group").focus();
					document.getElementById("group").value = "";
				}

				if (groupGlobal[0].getAttribute("unit-attribute") != "") {
					document.getElementById("unit").value =
						groupGlobal[0].getAttribute("unit-attribute");
				} else {
					document.getElementById("unit").placeholder =
						"No Attribute";
					document.getElementById("unit").value = "";
				}

				if (groupGlobal[0].getAttribute("id") != "") {
					document.getElementById("item-id").value =
						groupGlobal[0].getAttribute("id");
				} else {
					document.getElementById("item-id").placeholder =
						"No Attribute";
					document.getElementById("item-id").value = "";
				}
			} else {
				document.getElementById("group").focus();
				document.getElementById("group").placeholder = "Group";
				document.getElementById("unit").placeholder = "Unit";
				document.getElementById("item-id").placeholder = "ID";
			}
			e.srcElement.classList.add("svg-tool-selected");

			// e.srcElement.style.fill = "#ff000055";
		} else {
			document.getElementById("tag").style.display = "none";
		}

		document.querySelectorAll(".svg-tool-selected").forEach((e) => {
			e.style.fill = "#ff0000";
		});
	});

	document.getElementById("set-name").addEventListener("click", (e) => {
		document.querySelectorAll(".svg-tool-selected").forEach((e) => {
			if (document.querySelectorAll(".svg-tool-selected").length < 2) {
				e.setAttribute(
					"group-attribute",
					document.getElementById("group").value,
				);
				e.setAttribute(
					"unit-attribute",
					document.getElementById("unit").value,
				);
				if (
					e.hasAttribute("group-attribute") &&
					e.hasAttribute("unit-attribute")
				) {
					e.id =
						e.getAttribute("group-attribute") +
						"_" +
						e.getAttribute("unit-attribute");
				}
			} else {
				e.setAttribute(
					"group-attribute",
					document.getElementById("group").value,
				);
				e.id =
					e.getAttribute("group-attribute") +
					"_" +
					e.getAttribute("unit-attribute");
			}
		});
	});

	document.getElementById("set-id").addEventListener("click", (e) => {
		document.querySelectorAll(".svg-tool-selected").forEach((e) => {
			if (document.querySelectorAll(".svg-tool-selected").length < 2) {
				e.setAttribute(
					"id",
					document.getElementById("item-id").value,
				);
			} else {
				e.setAttribute(
					"id",
					document.getElementById("item-id").value,
				);
			}
		});
	});

	document.getElementById("set-unit").addEventListener("click", (e) => {
		setUnit();
	});

	//Tag
	document.addEventListener("mousemove", (e) => {
		document.getElementById("tag").style.left = `${e.x}px`;
		document.getElementById("tag").style.top = `${e.y}px`;
		document.getElementById("tag").style.transform = `translate(${
			(e.clientX / window.innerWidth) * -100
		}%, ${(e.clientY / window.innerHeight) * -150}%)`;
	});

	var fileInput = document.getElementById("myFile");
	var csvFileInput = document.getElementById("myCSVFile");
	var imageInput = document.getElementById("imageFile");
	var type = "";
	fileInput.addEventListener("click", (e) => {
		fileInput.value = null;
	});

		//Tag
		document.addEventListener("mousemove", (e) => {

			//Update Tags
			document.getElementById("tag").style.left = `${e.x}px`;
			document.getElementById("tag").style.top = `${e.y}px`;
			document.getElementById("tag").style.transform = `translate(${
				(e.clientX / window.innerWidth) * -100
			}%, ${(e.clientY / window.innerHeight) * -150}%)`;


			//Editing points
			if(mouseDown){
				if(tempSelected != null){
					if(tempSelected.getAttribute('cx') != null && tempSelected.getAttribute('cy') != null){
						if(globalSvgContainer.querySelector('svg') != null){
							var pt = globalSvgContainer.querySelector('svg').createSVGPoint();
							pt.x = e.clientX; pt.y = e.clientY;
							const coords = pt.matrixTransform(globalSvgContainer.querySelector('svg').getScreenCTM().inverse())
							console.log('Moving')
							tempSelected.setAttribute('cx', coords.x)
							tempSelected.setAttribute('cy', coords.y)
						}
					}
				}
				console.log("Mouse Down + Move")
			}
		});

	//Move SVG with CX and CY
	document.addEventListener("mousedown", (e) => {
		mouseDown = true
		// console.log(e.parentNode.nodeName.toLowerCase())
		if (e.srcElement.parentNode.nodeName.toLowerCase() == "g") {
			tempSelected = e.srcElement;
		}

		if (
			e.srcElement.parentNode.nodeName.toLowerCase() == "svg" ||
			e.srcElement.nodeName.toLowerCase() == "svg" ||
			e.srcElement.parentNode.nodeName.toLowerCase() == "g"
		) {
			console.log(e.srcElement.id);
			// if (currentSelected != null) {
			// 	currentSelected.classList.add("hovered");
			// }
			document.getElementById("tag").style.display = "flex";
			document.getElementById("label").innerText = e.srcElement.id;
			currentSelected = e.srcElement;

			const groupName = e.srcElement;
			//Get Attributes
			if (!multiSelect) {
				groupGlobal = [];
				document.querySelectorAll(".svg-tool-selected").forEach((e) => {
					// console.log(e.classList)
					e.classList.remove("svg-tool-selected");
					// console.log(e.classList)
					e.style.fill = "";
				});
				groupGlobal.push(groupName);
			} else {
				groupGlobal.push(groupName);
			}

			if (groupGlobal.length < 2) {
				if (groupGlobal[0].getAttribute("group-attribute") != "") {
					document.getElementById("unit").focus();

					document.getElementById("group").value =
						groupGlobal[0].getAttribute("group-attribute");
				} else {
					document.getElementById("group").focus();
					document.getElementById("group").value = "";
				}

				if (groupGlobal[0].getAttribute("unit-attribute") != "") {
					document.getElementById("unit").value =
						groupGlobal[0].getAttribute("unit-attribute");
				} else {
					document.getElementById("unit").placeholder =
						"No Attribute";
					document.getElementById("unit").value = "";
				}
			} else {
				document.getElementById("group").focus();
				document.getElementById("group").placeholder = "-";
				document.getElementById("unit").placeholder = "-";
			}
			e.srcElement.classList.add("svg-tool-selected");

			// e.srcElement.style.fill = "#ff000055";
		} else {
			document.getElementById("tag").style.display = "none";
		}

		document.querySelectorAll(".selected").forEach((e) => {
			e.style.fill = "#ff0000";
		});
	});

	document.addEventListener("mouseup", (e) => {
		mouseDown = false;
	})

	function handleFileChange(file) {
    flipped = false;
	var count = 0;

    const processSVG = (svgElement) => {
        const list = svgElement.querySelectorAll(`[id]`);
        document.getElementById("id-list").innerHTML = "";

        const processIdList = (idFormat) => {
            const regexLastUnderscore = /_(?=[^_]*$)/g;
            const regexLastDash = /-(?=[^-]*$)/g;
            const regexDashUnderscore = /\w+-\w+_\w+/;
            const regexText = /^[^-]*/;
            const regexGroupName = /^([A-Z]{2}\d{2}-\d{1,2})/;
            const regexUnitNumber = /(\d{1,3})\D*$/;
			

            const handleId = (currentId) => {
                const listItem = document.createElement("li");
				
                const regexResult = idFormat === format.fullUnderscore
                    ? currentId.replaceAll("-", "_")
                    : !regexDashUnderscore.test(currentId)
                        ? currentId.replace(regexLastDash, "_")
                        : currentId;

                const selected = svgElement.getElementById(`${currentId}`);
                const groupMatched = selected.id.match(regexGroupName);
                const unitMatched = selected.id.match(regexUnitNumber);

                if (groupMatched) {
                    selected.setAttribute("group-attribute", groupMatched[1]);
                }

                if (unitMatched) {
                    selected.setAttribute("unit-attribute", unitMatched[1]);
                }

                selected.id = regexResult;
                listItem.innerHTML = regexResult;
                clusterId.push({
                    id: count,
                    clusterId: regexText.exec(regexResult)[0],
                    unitId: regexResult,
                });

                count++;
                listItem.style.listStyle = "none";
                listItem.style.padding = "0.5em 0em";
                document.getElementById("id-list").append(listItem);
            };

            list.forEach((i) => {
                const currentId = i.id;

                if (idFormat === format.underscore) {
                    handleId(currentId);
                } else if (idFormat === format.dash) {
                    handleId(regexDashUnderscore.test(currentId)
                        ? currentId.replace(regexLastUnderscore, "-")
                        : currentId);
                } else if (idFormat === format.none || idFormat === format.fullUnderscore) {
                    handleId(currentId);
                }
            });
        };

        processIdList(idFormat);

        // Append the SVG element to the div element
        const svgContainer = document.getElementById("svg-container");
        svgContainer.innerHTML = "";
        svgContainer.appendChild(svgElement);

        // Set type for export filename
        type = idFormat === format.underscore
            ? "underscore"
            : idFormat === format.dash
                ? "dash"
                : "";
    };

    if (file.type === "image/svg+xml") {
        const reader = new FileReader();
        reader.addEventListener("load", () => {
            const svgString = reader.result;
            const parser = new DOMParser();
            const svgDoc = parser.parseFromString(svgString, "image/svg+xml");
            const svgElement = svgDoc.documentElement;
            processSVG(svgElement);
        });
        reader.readAsText(file);
    } else if (file.type === "image/jpeg" || file.type === "image/png" || file.type === "image/webp") {
        fileNameGlobal = file.name;
        document.getElementById("export-file-name").value = fileNameGlobal;
        const reader = new FileReader();
        reader.onload = (event) => {
            const contents = event.target.result;
            const img = document.createElement('img');
            img.src = contents;
            img.style.maxHeight = '100%';
            img.style.maxWidth = '100%';
            const svgContainer = document.getElementById("svg-container");
            svgContainer.innerHTML = "";
            svgContainer.appendChild(img);
        };
        reader.readAsDataURL(file);
    } else if (file.type === "text/csv") {
        fileNameGlobal = file.name;
        document.getElementById("export-file-name").value = fileNameGlobal;
        const reader = new FileReader();
        reader.onload = (event) => {
            const contents = event.target.result;
            const lines = contents.split("\n");
            const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
            const svgContainer = document.getElementById("svg-container");

            if (svgContainer.querySelector('svg')) {
                svgContainer.querySelector('svg').querySelectorAll('g').forEach((e) => {
                    if (e.id !== 'Reference') {
                        e.remove();
                    }
                });
            } else {
                const newSVG = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                newSVG.style.width = "100%";
                newSVG.style.height = "100%";
                newSVG.setAttribute("viewBox", "0 0 4096 4096");
                newSVG.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
                newSVG.appendChild(g);
                svgContainer.appendChild(newSVG);

                if (svgContainer.querySelector('img')) {
                    const tempImage = svgContainer.querySelector('img');
                    const svgimg = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                    svgimg.style.width = "100%";
                    svgimg.style.height = "100%";
                    svgimg.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', tempImage.src);
                    newSVG.append(svgimg);
                    tempImage.remove();
                }
            }

            for (let i = 0; i < lines.length; i++) {
                const fields = lines[i].split(",");
                const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");

                if (Number(fields[1]) || Number(fields[2])) {
                    circle.setAttribute("id", fields[0]);
                    circle.setAttribute("cx", Number(fields[1]).toFixed(4));
                    circle.setAttribute("cy", Number(fields[2]).toFixed(4));
                    circle.setAttribute("r", "30");
                    g.appendChild(circle);
                } else {
                    console.error(`${fields[0] ? fields[0] : `(Nameless), Row ${i + 1}`} does not contain any cx, cy data`);
                }
            }

            svgContainer.querySelector('svg').appendChild(g);
        };
        reader.readAsText(file);
    }
};

	fileInput.addEventListener("change", () => {
		handleFileChange(fileInput.files[0]);
	});


	document.body.addEventListener("dragover", (e) => {
		event.preventDefault(); // Prevent the default behavior
	});

	document.body.addEventListener("drop", (e) => {
		e.preventDefault();
		console.log(e.dataTransfer.files[0])
		handleFileChange(e.dataTransfer.files[0]);
	});


	//SVG Uploading
	fileInput.addEventListener("change", function () {
		flipped = false;
		
		// Get the selected file
		var file = fileInput.files[0];
		fileNameGlobal = file.name;
		console.log(file.type)
		document.getElementById("export-file-name").value = file.name

		// Check if the file is an SVG image
		if (file.type === "image/svg+xml") {
			var reader = new FileReader();

			// Add a load event listener
			reader.addEventListener("load", function () {
				// Get the SVG content as a string
				var svgString = reader.result;
				var parser = new DOMParser();
				var svgDoc = parser.parseFromString(svgString, "image/svg+xml");

				var svgElement = svgDoc.documentElement;

				var list = svgElement.querySelectorAll(`[id]`);
				document.getElementById("id-list").innerHTML = "";

				//Regex Options
				const regexLastUnderscore = /_(?=[^_]*$)/g;
				const regexLastDash = /-(?=[^-]*$)/g;
				const regexDashUnderscore = /\w+-\w+_\w+/;
				const regexText = /^[^-]*/;
				const regexGroupName = /^([A-Z]{2}\d{2}-\d{1,2})/;
				const regexUnitNumber = /(\d{1,3})\D*$/;

				if (idFormat == format.underscore) {
					var count = 0;
					//If Underscore mode
					list.forEach((i) => {
						const currentId = i.id;
						var listItem = document.createElement("li");

						//Check if ID ends with a dash

						if (!regexDashUnderscore.test(currentId)) {
							//Change the last Dash into Underscore
							const regexResult = currentId.replace(
								regexLastDash,
								"_",
							);
							const selected = svgElement.getElementById(
								`${currentId}`,
							);
							const groupMatched =
								selected.id.match(regexGroupName);
							const unitMatched =
								selected.id.match(regexUnitNumber);
							if (groupMatched) {
								selected.setAttribute(
									"group-attribute",
									groupMatched[1],
								);
							}

							if (unitMatched) {
								selected.setAttribute(
									"unit-attribute",
									unitMatched[1],
								);
							}

							selected.id = regexResult;
							listItem.innerHTML = regexResult;
							clusterId.push({
								id: count,
								clusterId: regexText.exec(regexResult)[0],
								unitId: regexResult,
							});
						} else {
							clusterId.push({
								id: count,
								clusterId: regexText.exec(currentId)[0],
								unitId: currentId,
							});
							listItem.innerHTML = currentId;
						}
						count++;
						listItem.style.listStyle = "none";
						listItem.style.padding = "0.5em 0em";
						document.getElementById("id-list").append(listItem);
					});
				} else if (idFormat == format.dash) {
					var count = 0;
					list.forEach((i) => {
						const currentId = i.id;
						var listItem = document.createElement("li");
						// console.log(regexDashUnderscore.test(currentId))
						if (regexDashUnderscore.test(currentId)) {
							const regexResult = currentId.replace(regexLastUnderscore,"-");

							const selected = svgElement.getElementById(`${currentId}`);
							const groupMatched = selected.id.match(regexGroupName);
							const unitMatched = selected.id.match(regexUnitNumber);

							if (groupMatched) {
								selected.setAttribute(
									"group-attribute",
									groupMatched[1],
								);
							}

							if (unitMatched) {
								selected.setAttribute(
									"unit-attribute",
									unitMatched[1],
								);
							}
							selected.id = regexResult;
							listItem.innerHTML = regexResult;
							clusterId.push({
								id: count,
								clusterId: regexText.exec(regexResult)[0],
								unitId: regexResult,
							});
						} else {
							listItem.innerHTML = currentId;
							clusterId.push({
								id: count,
								clusterId: regexText.exec(currentId)[0],
								unitId: currentId,
							});
						}
						count++;
						listItem.style.listStyle = "none";
						listItem.style.padding = "0.5em 0em";
						document.getElementById("id-list").append(listItem);
					});
				} else if (idFormat == format.none) {
					var count = 0;
					list.forEach((i) => {
						const currentId = i.id;
						var listItem = document.createElement("li");

						const selected = svgElement.getElementById(
							`${currentId}`,
						);
						const groupMatched = selected.id.match(regexGroupName);
						const unitMatched = selected.id.match(regexUnitNumber);
						if (groupMatched) {
							selected.setAttribute(
								"group-attribute",
								groupMatched[1],
							);
						}

						if (unitMatched) {
							selected.setAttribute(
								"unit-attribute",
								unitMatched[1],
							);
						}

						listItem.innerHTML = currentId;

						clusterId.push({
							id: count,
							clusterId: regexText.exec(currentId)[0],
							unitId: currentId,
						});
						count++;
						listItem.style.listStyle = "none";
						listItem.style.padding = "0.5em 0em";
						document.getElementById("id-list").append(listItem);
					});
				}
				if (idFormat == format.fullUnderscore) {
					var count = 0;
					//If Underscore mode
					list.forEach((i) => {
						const currentId = i.id;
						var listItem = document.createElement("li");

						//Check if ID ends with a dash

						if (currentId) {
							//Change the all Dash into Underscore
							const regexResult = currentId.replaceAll("-", "_");
							console.log(regexResult);
							const selected = svgElement.getElementById(
								`${currentId}`,
							);
							const groupMatched =
								selected.id.match(regexGroupName);
							const unitMatched =
								selected.id.match(regexUnitNumber);
							// selected.setAttribute("id", regexResult)
							if (groupMatched) {
								selected.setAttribute(
									"group-attribute",
									groupMatched[1],
								);
							}

							if (unitMatched) {
								selected.setAttribute(
									"unit-attribute",
									unitMatched[1],
								);
							}

							selected.id = regexResult;
							listItem.innerHTML = regexResult;
							clusterId.push({
								id: count,
								clusterId: regexText.exec(regexResult)[0],
								unitId: regexResult,
							});
						} else {
							clusterId.push({
								id: count,
								clusterId: regexText.exec(currentId)[0],
								unitId: currentId,
							});
							listItem.innerHTML = currentId;
						}
						count++;
						listItem.style.listStyle = "none";
						listItem.style.padding = "0.5em 0em";
						document.getElementById("id-list").append(listItem);
					});
				}

				// Append the SVG element to the div element
				var svgContainer = document.getElementById("svg-container");
				svgContainer.innerHTML = "";
				svgContainer.appendChild(svgElement);

				//Set type for export filename
				if (idFormat == format.underscore) {
					type = "underscore";
				} else if (idFormat == format.dash) {
					type = "dash";
				} else if (idFormat == format.none) {
					type = "";
				}
			});

			reader.readAsText(file);
		} else if (file.type === "image/jpeg" || file.type === "image/png" || file.type === "image/webp"){
			// Get the file object
		// var file = e.target.files[0];
		fileNameGlobal = file.name;
		document.getElementById("export-file-name").value = file.name

		// Create a new FileReader object
		var reader = new FileReader();

		// Set the onload function for the FileReader object
		reader.onload = function (event) {
			// Get the contents of the file
			var contents = event.target.result;

			// Split the contents into lines
			var lines = contents.split("\n");
			console.log(lines)

			// Create an SVG element
			var img = document.createElement('img');
			img.src = contents;
			img.style.maxHeight = '100%'
			img.style.maxWidth = '100%'
			var svgContainer = document.getElementById("svg-container")
			// remove all groups except for Reference
				svgContainer.innerHTML = ""
				svgContainer.appendChild(img)
			
		};

		// Read the file as text
		reader.readAsDataURL(file);
		}  else if (file.type === "text/csv"){
			
			// Get the file object
		// var file = e.target.files[0];
		fileNameGlobal = file.name;
		document.getElementById("export-file-name").value = file.name

		// Create a new FileReader object
		var reader = new FileReader();

		// Set the onload function for the FileReader object
		reader.onload = function (event) {
			// Get the contents of the file
			var contents = event.target.result;

			// Split the contents into lines
			var lines = contents.split("\n");
			console.log(lines)

			// Create an SVG element
			var g = document.createElementNS(
				"http://www.w3.org/2000/svg",
				"g",
			);

			var svgContainer = document.getElementById("svg-container")
			// remove all groups except for Reference
			if(svgContainer.querySelector('svg')){
				svgContainer.querySelector('svg').querySelectorAll('g').forEach((e) => {
				if(e.id != 'Reference'){
					e.remove()
				}
			})
			
			} else {
				// svgContainer.innerHTML = "";
				const newSVG = document.createElementNS("http://www.w3.org/2000/svg", "svg");
				newSVG.style.width = "100%"
				newSVG.style.height = "100%"
				newSVG.setAttribute("viewBox", "0 0 4096 4096")
				newSVG.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink")
				newSVG.appendChild(g)
				svgContainer.appendChild(newSVG)
				if(svgContainer.querySelector('img')){
					const tempImage = svgContainer.querySelector('img')
					const svgimg = document.createElementNS('http://www.w3.org/2000/svg','image');
					svgimg.style.width = "100%"
					svgimg.style.height = "100%"
					// svgimg.setAttributeNS('http://www.w3.org/2000/svg','id','testimg2');
					svgimg.setAttributeNS('http://www.w3.org/1999/xlink','xlink:href',tempImage.src);
					newSVG.append(svgimg)
					tempImage.remove()

				}
			}
			

			

			// Loop through the lines and create circles
			for (var i = 0; i < lines.length; i++) {
				// Split the line into fields
				var fields = lines[i].split(",");

				// Create a circle element
				var circle = document.createElementNS(
					"http://www.w3.org/2000/svg",
					"circle",
				);
				if(Number(fields[1]) || Number(fields[2])){
					circle.setAttribute("id", fields[0]);
					circle.setAttribute("cx", Number(fields[1]).toFixed(4));
					circle.setAttribute("cy", Number(fields[2]).toFixed(4));
					circle.setAttribute("r", "30");
					g.appendChild(circle);
				} else {
					console.error(`${fields[0] ?  fields[0] : `(Nameless), Row ${i + 1}`} does not contain any cx, cy data`)
				}
				
				
			}
			svgContainer.querySelector('svg').appendChild(g);
			
		};

		// Read the file as text
		reader.readAsText(file);
		}
	});

	// csvFileInput.addEventListener("change", (e) => {
		
	// });

	// imageInput.addEventListener("change", (e) => {
		
	// });

	document.addEventListener("keydown", (e) => {
		if (e.key == "Escape") {
			document.querySelectorAll(".svg-tool-selected").forEach((e) => {
				e.classList.remove("svg-tool-selected");
				e.style.fill = "";
				groupGlobal = [];
				document.querySelectorAll("#group").value = "";
			});
		}

		if (e.key == "Shift") {
			multiSelect = true;
		}

		if (e.key == "Enter") {
			document.querySelector("#set-name").click();
		}

		if (e.key == "Q") {
			document.querySelector("#set-unit").click();
		}
	});

	function setUnit() {
		for (var i = 0; i < groupGlobal.length; i++) {
			groupGlobal[i].setAttribute("unit-attribute", pad(i + 1));
		}
	}

	//Add zero to single digit
	function pad(d) {
		return d < 10 ? "0" + d.toString() : d.toString();
	}

	document.addEventListener("keydown", (e) => {
		if (e.key == "Escape") {
			document.querySelectorAll(".svg-tool-selected").forEach((e) => {
				e.classList.remove("svg-tool-selected");
				e.style.fill = "";
				groupGlobal = [];
				document.querySelectorAll("#group").value = "";
			});
		}

		if (e.key == "Shift") {
			multiSelect = true;
		}
	});

	document.addEventListener("keyup", (e) => {
		if (e.key == "Shift") {
			multiSelect = false;
		}
	});

	document.getElementById("hide-toggle").addEventListener("click", (e) => {
		if (document.getElementById("id-list").style.display == "none") {
			document.getElementById("id-list").style.display = "block";
			document.getElementById("hide-toggle").classList.remove("expand");
		} else {
			document.getElementById("id-list").style.display = "none";
			document.getElementById("hide-toggle").classList.add("expand");
		}
	});

	// document.getElementById("export-csv").addEventListener("click", (e) => {
	// 	exportCSV();
	// });

	document.getElementById("remove").addEventListener("click", (e) => {
		removeData();
	});

	// document
	// 	.getElementById("export-csv-count")
	// 	.addEventListener("click", (e) => {
	// 		exportCSVId();
	// 	});

	document.getElementById("export").addEventListener("click", (e) => {
		exportSVG();
	});

	document
		.getElementById("export-csv-layer")
		.addEventListener("click", (e) => {
			exportFloorNamePosition();
		});

	document
		.getElementById("export-csv-layer-2048")
		.addEventListener("click", (e) => {
			exportFloorNamePosition2048();
		});

	// CSV Conversion
	function exportCSV() {
		const file = fileNameGlobal;
		var data = clusterId;
		data.forEach((e) => {
			delete e.id;
		});
		if (clusterId.length > 0) {
			// We can create a header row by mapping the object keys
			var header = Object.keys(data[0])
				.map((key) => `"${key}"`)
				.join(",");

			var rows = data.map((obj) =>
				Object.values(obj)
					.map((val) => `"${val}"`)
					.join(","),
			);

			var csv = [header, ...rows].join("\n");
			var blob = new Blob([csv], { type: "text/csv" });
			var link = document.createElement("a");
			link.href = URL.createObjectURL(blob);

			link.download = file.replace(/\.[^/.]+$/, "") + "_" + type + ".csv";
			link.click();
		} else {
			alert("Import an SVG to start!");
		}
	}

	// CSV Conversion
	function exportCSVId() {
		var data = clusterId;
		const file = fileNameGlobal;
		if (clusterId.length > 0) {
			// We can create a header row by mapping the object keys
			var header = Object.keys(data[0])
				.map((key) => `"${key}"`)
				.join(",");

			var rows = data.map((obj) =>
				Object.values(obj)
					.map((val) => `"${val}"`)
					.join(","),
			);

			var csv = [header, ...rows].join("\n");
			var blob = new Blob([csv], { type: "text/csv" });
			var link = document.createElement("a");
			link.href = URL.createObjectURL(blob);
			link.download =
				file.replace(/\.[^/.]+$/, "") +
				"_" +
				type +
				"_w_Count" +
				".csv";
			link.click();
		} else {
			alert("Import an SVG to start!");
		}
	}
	//SVG Conversion
	function exportSVG() {
		const file = fileNameGlobal;
		var svg = document.querySelector("#svg-container").querySelector("svg");
		document.querySelectorAll("[id]").forEach((e) => {
			const str = e.getAttribute("id");
			e.setAttribute("data-name", str.replace(/\s+/g, "_"));
		});
		document.querySelectorAll("[group-attribute]").forEach((e) => {
			e.removeAttribute("group-attribute");
		});
		document.querySelectorAll("[unit-attribute]").forEach((e) => {
			e.removeAttribute("unit-attribute");
		});
		if (svg) {
			var serializer = new XMLSerializer();
			var svgString = serializer.serializeToString(svg);
			var blob = new Blob([svgString], { type: "image/svg+xml" });
			var url = URL.createObjectURL(blob);
			var link = document.createElement("a");
			link.href = url;
			link.download = file.replace(/\.[^/.]+$/, "") + "_" + type + ".svg";
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
		} else {
			alert("Import and SVG to start!");
		}
	}
	//SVG Conversion
	function exportFloorNamePosition() {
		// console.log(document.querySelector("#svg-container").querySelector("svg").childNodes.length)
		if (document.querySelector("#svg-container").querySelector("svg")) {
			const parser = new DOMParser();
			var doc = null;
			doc = document.querySelector("#svg-container").querySelector("svg");

			const layers = Array.from(doc.querySelectorAll("g"))
				.map((layer, index) => {
					
					if(layer.getAttribute("id") != null || layer.getAttribute("id") != undefined ){
						if (layer.getAttribute("id").toLowerCase() != "reference") {
							console.log("Layer ID is found")
						const id = layer.getAttribute("id").replace("_", "");
						const children = Array.from(layer.children).map(
							(child) => {
								console.log(child);
								const childId = child.getAttribute("data-name")
									? decodeHtml(
											child.getAttribute("data-name"),
									  )
									: child.getAttribute("id");

								const x = child.getAttribute("cx");
								const y = child.getAttribute("cy");
								return { id: childId, x, y };
							},
						);
						console.log(id, children);
						return { id, children };
						}
					}  else {
							console.log("Layer ID is null")
							console.log(layer)
							const id = `item-${index}`
						const children = Array.from(layer.children).map(
							(child) => {
								console.log(child);
								const childId = child.getAttribute("data-name")
									? decodeHtml(
											child.getAttribute("data-name"),
									  )
									: child.getAttribute("id");

								const x = child.getAttribute("cx");
								const y = child.getAttribute("cy");
								return { id: childId, x, y };
							},
						);
						console.log(id, children);
						return { id, children };
						}
					
				})
				.filter((layer) => layer !== undefined);

			var csv;
			if (layers.length < 2) {
				csv = layers
					.flatMap((layer) =>
						layer.children.map(
							(child) => `${child.id},${child.x},${child.y}`,
						),
					)
					.join("\n");

				console.log(csv);
			} else {
				csv = layers
					.flatMap((layer) =>
						layer.children.map(
							(child) =>
								`${layer.id} ${child.id},${child.x},${child.y}`,
						),
					)
					.join("\n");

				console.log(csv);
			}

			const file = fileNameGlobal;
			var blob = new Blob([csv], { type: "text/csv" });
			var link = document.createElement("a");
			link.href = URL.createObjectURL(blob);
			link.download =
				file.replace(/\.[^/.]+$/, "") + (flipped ? "-flipped" : "");
			(".csv");
			link.click();
		} else {
			alert("Import an SVG to start!");
		}
	}

	//SVG Conversion
	function exportFloorNamePosition2048() {
		// console.log(document.querySelector("#svg-container").querySelector("svg").childNodes.length)
		if (document.querySelector("#svg-container").querySelector("svg")) {
			const parser = new DOMParser();
			var doc = null;

			doc = document.querySelector("#svg-container").querySelector("svg");
			const height = doc.viewBox.baseVal.height;
			const width = doc.viewBox.baseVal.width;

			const layers = Array.from(doc.querySelectorAll("g"))
				.map((layer) => {
					if (layer.getAttribute("id").toLowerCase() != "reference") {
						const id = layer.getAttribute("id").replace("_", "");
						const children = Array.from(layer.children).map(
							(child) => {
								console.log(child);
								const childId = child.getAttribute("data-name")
									? decodeHtml(
											child.getAttribute("data-name"),
									  )
									: child.getAttribute("id");

								const x =
									(child.getAttribute("cx") / width) * 2048;
								const y =
									(child.getAttribute("cy") / height) * 2048;
								return { id: childId, x, y };
							},
						);
						console.log(id, children);
						return { id, children };
					}
				})
				.filter((layer) => layer !== undefined);

			var csv;
			if (layers.length < 2) {
				csv = layers
					.flatMap((layer) =>
						layer.children.map(
							(child) => `${child.id},${child.x},${child.y}`,
						),
					)
					.join("\n");

				console.log(csv);
			} else {
				csv = layers
					.flatMap((layer) =>
						layer.children.map(
							(child) =>
								`${layer.id} ${child.id},${child.x},${child.y}`,
						),
					)
					.join("\n");

				console.log(csv);
			}

			const file = fileNameGlobal;
			var blob = new Blob([csv], { type: "text/csv" });
			var link = document.createElement("a");
			link.href = URL.createObjectURL(blob);
			link.download =
				file.replace(/\.[^/.]+$/, "") + (flipped ? "-flipped" : "");
			(".csv");
			link.click();
		} else {
			alert("Import an SVG to start!");
		}
	}

	function decodeHtml(html) {
		var txt = document.createElement("textarea");
		txt.innerHTML = html;
		return txt.value;
	}

	document.getElementById("flip-x").addEventListener("click", (e) => {
		// var svg = document.querySelector("#svg-container").querySelector("svg");
		// svg.style.scale = "-1 1"
		flipped = !flipped;

		var doc = null;
		doc = document.querySelector("#svg-container").querySelector("svg");
		const width = doc.viewBox.baseVal.width;
		const layers = Array.from(doc.querySelectorAll("g")).map((layer) => {
			// if(layer.getAttribute("id").toLowerCase() != 'reference'){
			// const id = layer.getAttribute("id").replace('_', "");
			const children = Array.from(layer.children).map((child) => {
				if (child.tagName == "image") {
					// child.getAttribute("transform")
					// child.style.transform = "translate(-100%, 0) scale(-1, 1)"
					if (!child.hasAttribute("flipped")) {
						child.setAttribute("flipped", "");
						child.style.transform =
							"scaleX(-1) translate(-100%, 0)";
					} else {
						child.removeAttribute("flipped");
						child.style.transform = "scaleX(1) translate(0, 0)";
					}

					console.log(child.style.scale);
				} else {
					const x = child.getAttribute("cx");
					child.setAttribute("cx", width - x);
				}
			});
			// }
		});
	});

	document.getElementById("flip-y").addEventListener("click", (e) => {
		// var svg = document.querySelector("#svg-container").querySelector("svg");
		// svg.style.scale = "-1 1"
		flipped = !flipped;

		var doc = null;
		doc = document.querySelector("#svg-container").querySelector("svg");
		const height = doc.viewBox.baseVal.height;
		const layers = Array.from(doc.querySelectorAll("g")).map((layer) => {
			// if(layer.getAttribute("id").toLowerCase() != 'reference'){
			// const id = layer.getAttribute("id").replace('_', "");
			const children = Array.from(layer.children).map((child) => {
				if (child.tagName == "image") {
					// child.getAttribute("transform")
					// child.style.transform = "translate(-100%, 0) scale(-1, 1)"
					if (!child.hasAttribute("flipped")) {
						child.setAttribute("flipped", "");
						child.style.transform =
							"scaleY(-1) translate(0, -100%)";
					} else {
						child.removeAttribute("flipped");
						child.style.transform = "scaleX(1) translate(0, 0)";
					}

					console.log(child.style.scale);
				} else {
					const y = child.getAttribute("cy");
					child.setAttribute("cy", height - y);
				}
			});
			// }
		});
	});

	function removeData() {
		const doc = document.querySelector("#svg-container");

		// threeBed.forEach((x) => {
		//   console.log(x.getAttribute("style"));
		//   x.setAttribute("class", "cls-8182");
		// });

		// threeBedClip.setAttribute("class", threeBed.class);
		// threeBedClip.empty();

		// threeBed.setAttribute("fill", "#bddbe6");
		// const twoBed = doc.querySelectorAll(".cls-8281").closest("g");
		// twoBed.setAttribute("fill", "#f2b38c");
		// const oneBed = doc.querySelectorAll(".cls-7986").closest("g");
		// oneBed.setAttribute("fill", "#e8acac");
		// const xml = doc.querySelector("xml").outerHTML;
		const xml = `<?xml version="1.0" encoding="UTF-8"?>`;
		const defs = doc.querySelector("defs");
		const maskParent = document.querySelector("defs");
		const maskChild = maskParent.children;
		const maskShape = Array.from(maskChild).map((e) => {
			// const className = e.classList
			// console.log(className)
			const shape = e.children[0];
			if (shape) {
				if (shape.nodeName == "polygon" || shape.nodeName == "path") {
					const className = shape.classList[0];
					shape.classList.remove(className);
					return shape;
				}
			}
		});
		console.log(maskShape);

		console.log(document.styleSheets[1].cssRules);
		// var kvPair = Array.from(document.styleSheets[1].cssRules).map((e)=> {
		// 	// return e.selectorText
		// 	// return e.style.clipPath
		// 	if(e.style.clipPath){
		// 		var str = e.style.clipPath;
		// 		var regex = /#([\w-]+)/; // \w matches any alphanumeric character
		// 		var match = regex.exec(str); // exec returns an array of matches
		// 		var id
		// 		id = "#" + match[1]; // the first capture group is the ID
		// 		return {[e.selectorText.replace(/[-.]/g, "")] : id}
		// 	}
		// })

		var kvPair = Object.assign(
			{},
			...Array.from(document.styleSheets[1].cssRules).map((e) => {
				// return e.selectorText
				// return e.style.clipPath
				if (e.style.clipPath) {
					var str = e.style.clipPath;
					var regex = /#([\w-]+)/; // \w matches any alphanumeric character
					var match = regex.exec(str); // exec returns an array of matches
					var id = "#" + match[1]; // the first capture group is the ID
					return { [e.selectorText.replace(/[-.]/g, "")]: id };
				}
			}),
		);

		// kvPair = kvPair.filter(element => {
		//     return element !== undefined;
		// })
		var classes = [
			"cls-8158",
			"cls-8167",
			"cls-8163",
			"cls-8166",
			"cls-8165",
		];
		console.log(kvPair);
		const classValues = document
			.getElementById("myClasses")
			.value.replace(/\s/g, "");
		if (classValues) {
			classes = classValues.split(",");
		}

		var units = [];
		if (classes) {
			classes.forEach((e) => {
				doc.querySelectorAll(`.${e}`).forEach((i) => {
					console.log(i);
					const parentClass = String(i.parentElement.classList[0]);
					const refId = kvPair[parentClass.replace(/[-.]/g, "")];
					console.log(parentClass);
					const refEl = doc
						.querySelector("defs")
						.querySelector(refId);
					var child;
					if (refEl) {
						console.log(refEl);
						child = refEl.children[0];
						child.classList.remove(child.classList[0]);
						child.classList.add(e);
						units.push(child);
						return child;
					}
				});
			});
		}

		console.log("units");
		console.log(units);

		// const threeBed = Array.from(doc.querySelectorAll(".cls-8182")).map((e) => {
		// 			const parentClass = String(e.parentElement.classList[0])
		// 			console.log(e)
		// 			const refId = kvPair[parentClass.replace( /[-.]/g, "")]
		// 			console.log(parentClass)
		// 			const refEl = doc.querySelector("defs").querySelector(refId)
		// 			var child
		// 			if(refEl){
		// 				child = refEl.children[0]
		// 				child.classList.remove(child.classList[0])
		// 				child.classList.add('cls-8182')
		// 				return child
		// 			}
		// 		});
		// 		console.log(threeBed)

		// 		const twoBed = Array.from(doc.querySelectorAll(".cls-8281")).map((e) => {
		// 			const parentClass = String(e.parentElement.classList[0])
		// 			const refId = kvPair[parentClass.replace ( /[-.]/g, "")]
		// 			console.log(parentClass)
		// 			const refEl = doc.querySelector("defs").querySelector(refId)
		// 			var child
		// 			if(refEl){
		// 				child = refEl.children[0]
		// 				child.classList.remove(child.classList[0])
		// 				child.classList.add('cls-8281')
		// 				return child
		// 			}
		// 		});
		// 		console.log(threeBed)

		// 		const oneBed = Array.from(doc.querySelectorAll(".cls-7986")).map((e) => {
		// 			const parentClass = String(e.parentElement.classList[0])
		// 			const refId = kvPair[parentClass.replace ( /[-.]/g, "")]
		// 			console.log(parentClass)
		// 			const refEl = doc.querySelector("defs").querySelector(refId)
		// 			var child
		// 			if(refEl){
		// 				child = refEl.children[0]
		// 				child.classList.remove(child.classList[0])
		// 				child.classList.add('cls-7986')
		// 				return child
		// 			}
		// 		});
		// 		console.log(threeBed)
		// const style = doc.querySelector("style");

		// parent.setAttribute("id", "Layer_1");
		// parent.setAttribute("data-name", "Layer 1");
		// parent.setAttribute("viewBox", "0 0 1684.08 2384.28");
		// parent.setAttribute("xmlns", "http://www.w3.org/2000/svg");
		// parent.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
		// defs.append(style);

		const output = document.createElementNS(
			"http://www.w3.org/2000/svg",
			"g",
		);
		// parent.append(oneBed);
		// parent.append(twoBed);
		// threeBed.forEach((e) => {
		// 	parent.appendChild(e);
		// })

		// output.append(parent);
		// parent.prepend(xml);
		// save the output as a separate SVG file

		var svg = doc.querySelector("svg");
		console.log(svg);
		while (svg.firstChild) {
			svg.removeChild(svg.firstChild);
		}
		// // const parent = document.createElement("g");
		svg.append(defs);
		units.forEach((e) => {
			console.log(e);
			svg.append(e);
		});

		// twoBed.forEach((e) => {
		// 	svg.append(e)
		// })

		// oneBed.forEach((e) => {
		// 	svg.append(e)
		// })

		// maskShape.forEach((e) => {
		// 	svg.append(e)
		// })
		// console.log(doc.querySelector('svg').attributeStyleMap)
		// svg.appendChild(parent)
	}

	// 	function getStyle(className) {
	//     var cssText = "";
	//     var classes = document.styleSheets[0].rules || document.styleSheets[0].cssRules;
	//     for (var x = 0; x < classes.length; x++) {
	//         if (classes[x].selectorText == className) {
	//             cssText += classes[x].cssText || classes[x].style.cssText;
	//         }
	//     }
	//     return cssText;
	// }

	function getStyleSheet(unique_title) {
		for (const sheet of document.styleSheets) {
			if (sheet.title === unique_title) {
				return sheet;
			}
		}
	}
</script>
