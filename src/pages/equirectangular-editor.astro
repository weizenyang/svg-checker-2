<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Equirectangular Image Editor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <style pre-load>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        color: #333;
      }
      h1 {
        text-align: center;
        margin-bottom: 20px;
      }
      .container {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
      .drop-area {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 3px dashed #ccc;
        border-radius: 10px;
        display: none; /* Hidden by default */
        align-items: center;
        justify-content: center;
        text-align: center;
        background-color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s ease;
        cursor: pointer;
        z-index: 10;
      }
      .drop-area.highlight {
        border-color: #4a90e2;
        background-color: rgba(240, 247, 255, 0.9);
      }
      .drop-area.show {
        display: flex;
      }
      .drop-area p {
        margin: 0;
        font-size: 1.2rem;
        color: #666;
      }
      .image-section {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      .image-section h2 {
        margin: 0;
      }
      .canvas-container {
        position: relative;
        width: 100%;
        height: 512px;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
        background-color: #eee;
      }
      canvas {
        width: 100%;
        height: 100%;
        cursor: grab;
      }
      canvas:active {
        cursor: grabbing;
      }
      .controls {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding: 15px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .rotation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .lock-controls {
        display: flex;
        gap: 15px;
      }
      .lock-option {
        display: flex;
        align-items: center;
        gap: 5px;
      }
      .rotation-input {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
      }
      .rotation-input input {
        width: 70px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: right;
      }
      .rotation-slider {
        position: relative;
        width: 100%;
        height: 50px;
        border: 1px solid #ddd;
        border-radius: 25px;
        overflow: hidden;
        background-color: #f9f9f9;
        margin-bottom: 10px;
      }
      .rotation-indicator {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: red;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2;
      }
      .rotation-ticks {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        transition: transform 0.1s ease;
        justify-content: space-evenly;
      }
      .tick {
        position: absolute;
        height: 30px;
        width: 1px;
        background-color: #ccc;
      }
      .tick.major {
        height: 40px;
        width: 2px;
        background-color: #333;
      }
      .tick-label {
        position: absolute;
        top: 45px;
        width: 10px;
        transform: translateX(-50%);
        font-size: 12px;
        color: #666;
      }
      .buttons {
        display: flex;
        gap: 10px;
        margin-top: 10px;
      }
      button {
        padding: 10px 20px;
        background-color: #4a90e2;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.2s;
      }
      button:hover {
        background-color: #357abD;
      }
      button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
      .export-button {
        background-color: #4CAF50;
      }
      .export-button:hover {
        background-color: #3e8e41;
      }
      .reset-button {
        background-color: #f44336;
      }
      .reset-button:hover {
        background-color: #d32f2f;
      }
      .center-line {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 50%;
        width: 2px;
        background-color: red;
        pointer-events: none; /* allows clicking through to canvas */
        z-index: 5;
      }
      .hover-indicator {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: #ffff00;
        pointer-events: none;
        z-index: 6;
        display: none;
      }
      .degree-display {
        position: absolute;
        bottom: -25px;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 12px;
        pointer-events: none;
        z-index: 7;
        display: none;
      }
      .tabs {
        display: flex;
        border-bottom: 2px solid #ddd;
        margin-bottom: 20px;
      }
      .tab {
        padding: 12px 24px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-bottom: none;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.2s;
      }
      .tab:hover {
        background-color: #e9e9e9;
      }
      .tab.active {
        background-color: white;
        border-top: 3px solid #4a90e2;
      }
      .tab-content {
        display: none;
      }
      .tab-content.active {
        display: block;
      }
      .batch-upload {
        border: 2px dashed #ddd;
        border-radius: 8px;
        padding: 40px;
        text-align: center;
        background-color: #fafafa;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .batch-upload:hover, .batch-upload.dragover {
        border-color: #4a90e2;
        background-color: #f0f7ff;
      }
      .file-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin: 15px 0;
      }
      .file-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
      }
      .file-item:last-child {
        border-bottom: none;
      }
      .file-name {
        font-weight: bold;
        flex-grow: 1;
      }
      .file-size {
        color: #666;
        font-size: 0.9em;
        margin-right: 10px;
      }
      .remove-file {
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 3px;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 0.8em;
      }
      .remove-file:hover {
        background-color: #d32f2f;
      }
      .batch-controls {
        display: flex;
        gap: 15px;
        align-items: center;
        margin: 20px 0;
      }
      .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
        margin: 15px 0;
        display: none;
      }
      .progress-fill {
        height: 100%;
        background-color: #4a90e2;
        transition: width 0.3s ease;
        width: 0%;
      }
    </style>
  </head>
  <body>
    <div class="flex align-center text-center">
        <a
        href="/"
        class="flex w-fit border-2 pl-2 pr-2 p-1 text-center rounded-md content-center hover:bg-neutral-100"
    >
        <div class="align-center content-center">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="size-5"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"
                ></path>
            </svg>
        </div>
    
        <p class="ml-2">Home</p>
    </a>
        <h1 class="!m-0 pl-2 text-center align-center align-middle self-center">Equirectangular Image Editor</h1>
    </div>
    
    
    <div class="container">
      <!-- Tab Navigation -->
      <div class="tabs">
        <div class="tab active" data-tab="single">Single Image Editor</div>
        <div class="tab" data-tab="batch">Batch Rotation</div>
        <div class="tab" data-tab="grouping">File Grouping</div>
      </div>

      <!-- Single Image Editor Tab -->
      <div id="single-tab" class="tab-content active">
        <div class="image-section">
          <h2>Reference Image</h2>
          <div class="canvas-container">
            <div id="reference-drop" class="drop-area">
              <p>Drag & drop reference image here or click to select</p>
            </div>
            <canvas id="reference-canvas"></canvas>
            <div class="center-line"></div>
            <div id="reference-hover-line" class="hover-indicator"></div>
            <div id="reference-degree-display" class="degree-display"></div>
          </div>
        </div>

        <div class="image-section">
          <h2>Image to Edit</h2>
          <div class="canvas-container">
            <div id="edit-drop" class="drop-area">
              <p>Drag & drop image to edit here or click to select</p>
            </div>
            <canvas id="edit-canvas"></canvas>
            <div class="center-line"></div>
            <div id="edit-hover-line" class="hover-indicator"></div>
            <div id="edit-degree-display" class="degree-display"></div>
          </div>
        </div>

        <div class="controls">
          <div class="rotation-header">
            <h3 style="margin: 0;">Rotation Controls</h3>
            <div class="lock-controls">
              <label class="lock-option">
                <input type="checkbox" id="lock-longitude"> Lock Longitude
              </label>
              <label class="lock-option">
                <input type="checkbox" id="lock-latitude" checked> Lock Latitude
              </label>
            </div>
          </div>
          
          <div class="rotation-input">
            <span>Longitude:</span>
            <div>
              <input type="number" id="longitude-input" value="0.0" step="0.1" min="-180" max="180">
              <span>°</span>
            </div>
            <div>
              <p id="longitude-offset-display"></p>
              <span>px</span>
            </div>
          </div>
          
          <div class="rotation-slider">
            <div class="rotation-indicator"></div>
            <div id="rotation-ticks" class="rotation-ticks"></div>
          </div>
          
          <div class="rotation-input">
            <span>Latitude:</span>
            <div>
              <input type="number" id="latitude-input" value="0.0" step="0.1" min="-90" max="90">
              <span>°</span>
            </div>
            <div>
              <p id="latitude-offset-display"></p>
              <span>px</span>
            </div>
          </div>
          
          <div class="rotation-input">
            <span>Export Filename:</span>
            <div>
              <input type="text" id="filename-input" placeholder="Enter filename..." style="width: 200px;">
            </div>
          </div>
          
          <div class="buttons">
            <button id="reset-button" class="reset-button" disabled>Reset Rotation</button>
            <button id="export-button" class="export-button" disabled>Export Image</button>
          </div>
        </div>

        <!-- Auto-Alignment Panel -->
        <div class="controls" id="auto-alignment-panel" style="margin-top: 20px;">
          <div class="rotation-header">
            <h3 style="margin: 0;">Auto-Alignment</h3>
          </div>
          
          <div class="batch-controls">
            <label>
              <span>Alignment Method:</span>
              <select id="alignment-method" style="margin-left: 10px; padding: 5px;">
                <option value="edge">Edge Detection Matching</option>
                <option value="feature">Feature Point Matching</option>
                <option value="phase">Phase Correlation</option>
              </select>
            </label>
          </div>

          <div class="batch-controls" id="edge-options">
            <label>
              <span>Edge Detection:</span>
              <select id="edge-method" style="margin-left: 10px; padding: 5px;">
                <option value="canny">Canny (Default)</option>
                <option value="sobel">Sobel</option>
                <option value="prewitt">Prewitt</option>
                <option value="roberts">Roberts</option>
              </select>
            </label>
          </div>

          <div class="batch-controls" id="feature-options" style="display: none;">
            <label>
              <span>Corner Threshold:</span>
              <input type="range" id="corner-threshold" min="0.01" max="0.3" step="0.01" value="0.1" style="margin-left: 10px;">
              <span id="threshold-value">0.1</span>
            </label>
          </div>

          <div class="batch-controls" id="phase-options" style="display: none;">
            <label>
              <span>Downsample Factor:</span>
              <select id="downsample-factor" style="margin-left: 10px; padding: 5px;">
                <option value="1">Full Resolution</option>
                <option value="2">Half Resolution</option>
                <option value="4" selected>Quarter Resolution</option>
              </select>
            </label>
          </div>

          <div class="progress-bar" id="alignment-progress-bar" style="display: none;">
            <div class="progress-fill" id="alignment-progress-fill"></div>
          </div>

          <div class="buttons">
            <button id="show-edge-overlay" class="reset-button" disabled>Show Edge Overlay</button>
            <button id="start-alignment" class="export-button" disabled>Start Auto-Alignment</button>
          </div>
        </div>
      </div>

      <!-- Batch Rotation Tab -->
      <div id="batch-tab" class="tab-content">
        <div class="image-section">
          <h2>Batch Image Upload</h2>
          <div id="batch-upload" class="batch-upload">
            <p><strong>Drop multiple images or folders here or click to select</strong></p>
            <p>Supports JPG, PNG, and other image formats • Automatically finds images in nested folders</p>
            <input type="file" id="batch-file-input" multiple accept="image/*" style="display: none;">
          </div>
          
          <div id="batch-file-list" class="file-list" style="display: none;">
            <!-- File list will be populated here -->
          </div>
        </div>

        <div class="controls">
          <div class="rotation-header">
            <h3 style="margin: 0;">Batch Rotation Settings</h3>
          </div>
          
          <div class="batch-controls">
            <label>
              <span>Rotation Degrees:</span>
              <input type="number" id="batch-rotation-input" value="0" step="0.1" min="-180" max="180" style="width: 100px; margin-left: 10px;">
              <span>°</span>
            </label>
            
            <label>
              <span>Output Prefix:</span>
              <input type="text" id="batch-prefix-input" placeholder="" style="width: 120px; margin-left: 10px;">
            </label>
          </div>
          
          <div class="batch-controls">
            <label class="lock-option">
              <input type="checkbox" id="preserve-structure" checked> Preserve folder structure
            </label>
          </div>
          
          <div class="progress-bar" id="batch-progress-bar">
            <div class="progress-fill" id="batch-progress-fill"></div>
          </div>
          
          <div class="buttons">
            <button id="batch-clear-button" class="reset-button" disabled>Clear All</button>
            <button id="batch-process-button" class="export-button" disabled>Process & Download All</button>
          </div>
        </div>
      </div>

      <!-- File Grouping Tab -->
      <div id="grouping-tab" class="tab-content">
        <div class="image-section">
          <h2>File Grouping Analysis</h2>
          <div id="grouping-upload" class="batch-upload">
            <p><strong>Drop multiple files here or click to select</strong></p>
            <p>Upload files to analyze their naming patterns and group them into folders</p>
            <input type="file" id="grouping-file-input" multiple style="display: none;">
          </div>
          
          <div id="grouping-file-list" class="file-list" style="display: none;">
            <!-- File list will be populated here -->
          </div>
        </div>

        <div class="controls" id="grouping-analysis" style="display: none;">
          <div class="rotation-header">
            <h3 style="margin: 0;">Pattern Analysis</h3>
          </div>
          
          <div id="pattern-columns" style="margin: 20px 0;">
            <!-- Pattern columns will be displayed here -->
          </div>
          
          <div class="batch-controls">
            <label>
              <span>Group by Column:</span>
              <select id="grouping-column-select" style="margin-left: 10px; padding: 5px;">
                <option value="">Select a column to group by...</option>
              </select>
            </label>
          </div>
          
          <div id="grouping-preview" style="margin: 20px 0; display: none;">
            <h4>Grouping Preview:</h4>
            <div id="grouping-preview-content" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background-color: #f9f9f9;">
              <!-- Preview content will be shown here -->
            </div>
          </div>
          
          <div class="buttons">
            <button id="grouping-clear-button" class="reset-button" disabled>Clear All</button>
            <button id="grouping-process-button" class="export-button" disabled>Create Grouped Folders</button>
          </div>
        </div>
      </div>
    </div>
    
    <script>
import { imageConfig } from "astro:assets";

// Declare JSZip as a global variable
declare const JSZip: any;

      // Global variables
      let referenceImage = null;
      let editImage = null;
      let longitudeRotation = 0; // degrees
      let latitudeRotation = 0;  // degrees
      let longitudeOffset = 0; // degrees
      let latitudeOffset = 0;  // degrees
      let isDragging = false;
      let lastMouseX = 0;
      let lastMouseY = 0;
      let lockLongitude = false;
      let lockLatitude = true; // Locked by default
      let imageSize = {width: 0, height: 0}
      
      // DOM Elements
      const referenceCanvas = document.getElementById('reference-canvas');
      const editCanvas = document.getElementById('edit-canvas');
      const referenceCtx = referenceCanvas.getContext('2d');
      const editCtx = editCanvas.getContext('2d');
      const rotationTicksEl = document.getElementById('rotation-ticks');
      const resetButton = document.getElementById('reset-button');
      const exportButton = document.getElementById('export-button');
      const lockLongitudeCheckbox = document.getElementById('lock-longitude');
      const lockLatitudeCheckbox = document.getElementById('lock-latitude');
      const longitudeInput = document.getElementById('longitude-input');
      const latitudeInput = document.getElementById('latitude-input');
      const longitudeOffsetDisplay = document.getElementById('longitude-offset-display');
      const latitudeOffsetDisplay = document.getElementById('latitude-offset-display');
      const filenameInput = document.getElementById('filename-input');
      
      // Hover indicator elements
      const referenceHoverLine = document.getElementById('reference-hover-line');
      const editHoverLine = document.getElementById('edit-hover-line');
      const referenceDegreeDisplay = document.getElementById('reference-degree-display');
      const editDegreeDisplay = document.getElementById('edit-degree-display');

      // Set up drop areas
      setupDropArea('reference-drop', loadReferenceImage);
      setupDropArea('edit-drop', loadEditImage);
      
      // Initially show drop areas for empty canvases
      document.getElementById('reference-drop').classList.add('show');
      document.getElementById('edit-drop').classList.add('show');
      
      // Set up drag events on canvas containers to show drop areas
      document.querySelectorAll('.canvas-container').forEach(container => {
        container.addEventListener('dragenter', function(e) {
          e.preventDefault();
          const dropArea = container.querySelector('.drop-area');
          dropArea.classList.add('show');
        });
        
        container.addEventListener('dragleave', function(e) {
          e.preventDefault();
          // Only hide if we're leaving the container entirely
          if (!container.contains(e.relatedTarget)) {
            const dropArea = container.querySelector('.drop-area');
            dropArea.classList.remove('show');
          }
        });
        
        container.addEventListener('dragover', function(e) {
          e.preventDefault();
        });
        
        container.addEventListener('drop', function(e) {
          e.preventDefault();
          const dropArea = container.querySelector('.drop-area');
          dropArea.classList.remove('show');
        });
      });
      
      // Canvas initialization
      function initCanvas(canvas) {
        const container = canvas.parentElement;
        canvas.width = container.offsetWidth;
        canvas.height = container.offsetHeight;
      }
      
      // Initialize canvases
      initCanvas(referenceCanvas);
      initCanvas(editCanvas);
      
      // Create rotation tick marks
      createRotationTicks();
      
      // Set up event listeners
      window.addEventListener('resize', handleResize);
      editCanvas.addEventListener('mousedown', handleMouseDown);
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      resetButton.addEventListener('click', resetRotation);
      exportButton.addEventListener('click', exportImage);
      lockLongitudeCheckbox.addEventListener('change', function() {
        lockLongitude = this.checked;
      });
      lockLatitudeCheckbox.addEventListener('change', function() {
        lockLatitude = this.checked;
      });
      longitudeInput.addEventListener('change', function() {
        longitudeRotation = parseFloat(this.value);
        longitudeOffset = longitudeRotation * imageSize.width / 360
        updateRotationDisplay();
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      });
      latitudeInput.addEventListener('change', function() {
        latitudeRotation = parseFloat(this.value);
        latitudeOffset = latitudeRotation * imageSize.width / 360
        updateRotationDisplay();
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      });
      
      // Mouse hover event listeners for degree display
      referenceCanvas.addEventListener('mousemove', handleCanvasHover);
      editCanvas.addEventListener('mousemove', handleCanvasHover);
      referenceCanvas.addEventListener('mouseleave', hideHoverIndicators);
      editCanvas.addEventListener('mouseleave', hideHoverIndicators);
      
      function handleCanvasHover(e) {
        const rect = e.target.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const canvasWidth = rect.width;
        
        // Calculate degree (0-360) based on mouse position
        const degree = (x / canvasWidth) * 360;
        
        // Show hover lines on both canvases at the same position
        const leftPercent = (x / canvasWidth) * 100;
        
        referenceHoverLine.style.left = leftPercent + '%';
        editHoverLine.style.left = leftPercent + '%';
        referenceDegreeDisplay.style.left = leftPercent + '%';
        editDegreeDisplay.style.left = leftPercent + '%';
        
        // Update degree text
        const degreeText = degree.toFixed(1) + '°';
        referenceDegreeDisplay.textContent = degreeText;
        editDegreeDisplay.textContent = degreeText;
        
        // Show indicators
        referenceHoverLine.style.display = 'block';
        editHoverLine.style.display = 'block';
        referenceDegreeDisplay.style.display = 'block';
        editDegreeDisplay.style.display = 'block';
      }
      
      function hideHoverIndicators() {
        referenceHoverLine.style.display = 'none';
        editHoverLine.style.display = 'none';
        referenceDegreeDisplay.style.display = 'none';
        editDegreeDisplay.style.display = 'none';
      }
      
      function setupDropArea(id, callback) {
        const dropArea = document.getElementById(id);
        const highlight = () => dropArea.classList.add('highlight');
        const unhighlight = () => dropArea.classList.remove('highlight');
        
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, preventDefaults, false);
        });
        
        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
          dropArea.addEventListener(eventName, highlight, false);
        });
        
        // Unhighlight when dragged item leaves or is dropped
        ['dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, unhighlight, false);
        });
        
        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);
        
        // Handle click to select files
        dropArea.addEventListener('click', () => {
          const input = document.createElement('input');
          input.type = 'file';
          input.accept = 'image/*';
          input.onchange = (e) => {
            if (e.target.files.length) {
              processFile(e.target.files[0], callback);
            }
          };
          input.click();
        });
        
        function handleDrop(e) {
          const dt = e.dataTransfer;
          const files = dt.files;
          
          if (files.length) {
            processFile(files[0], callback);
          }
        }
      }
      
      function processFile(file, callback) {
        if (file.type.match('image.*')) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
            const img = new Image();
            img.onload = function() {
              callback(img, file.name);
            };
            img.src = e.target.result;
            imageSize.width = img.width
            imageSize.height = img.height
          };
          
          reader.readAsDataURL(file);
        }
      }
      
      function loadReferenceImage(img, filename) {
        referenceImage = img;
        drawImage(referenceCtx, img);
        // Hide drop area after image is loaded - it will show again during drag events
        document.getElementById('reference-drop').classList.remove('show');
        // Reset edge overlay when new image is loaded
        hideEdgeOverlays();
        edgeOverlayVisible = false;
        (showEdgeOverlayBtn as HTMLButtonElement).textContent = 'Show Edge Overlay';
        checkAlignmentReady();
      }
      
      function loadEditImage(img, filename) {
        editImage = img;
        // Set the filename in the input field (remove extension)
        if (filename) {
          const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
          filenameInput.value = nameWithoutExt;
        }
        drawImage(editCtx, img, longitudeRotation, latitudeRotation);
        (resetButton as HTMLButtonElement).disabled = false;
        (exportButton as HTMLButtonElement).disabled = false;
        // Hide drop area after image is loaded - it will show again during drag events
        document.getElementById('edit-drop').classList.remove('show');
        // Reset edge overlay when new image is loaded
        hideEdgeOverlays();
        edgeOverlayVisible = false;
        (showEdgeOverlayBtn as HTMLButtonElement).textContent = 'Show Edge Overlay';
        checkAlignmentReady();
      }
      
      function drawImage(ctx, img, lonRotation = 0, latRotation = 0) {
        if (!img) return;
        
        const canvas = ctx.canvas;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Normalize the horizontal offset
        let xOffset = (lonRotation / 360) * img.width;
        xOffset = ((xOffset % img.width) + img.width) % img.width;
        
        const yOffset = (latRotation / 180) * img.height;
        
        // Determine scale factor from source image width to canvas width
        const scale = canvas.width / img.width;
        
        // Calculate available width from xOffset to the image end
        const availableWidth = img.width - xOffset;
        const destWidthFirst = availableWidth * scale;
        
        // Draw the right segment of the image
        ctx.drawImage(
            img,
            xOffset, yOffset, availableWidth, img.height,
            0, 0, destWidthFirst, canvas.height
        );
        
        // If the first segment doesn't fill the canvas, draw the left segment of the image
        if (destWidthFirst < canvas.width) {
            const remainingDestWidth = canvas.width - destWidthFirst;
            const remainingSrcWidth = remainingDestWidth / scale;
            ctx.drawImage(
            img,
            0, yOffset, remainingSrcWidth, img.height,
            destWidthFirst, 0, remainingDestWidth, canvas.height
            );
        }
        }
      
      function handleResize() {
        initCanvas(referenceCanvas);
        initCanvas(editCanvas);
        
        if (referenceImage) {
          drawImage(referenceCtx, referenceImage);
        }
        
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      }
      
      function handleMouseDown(e) {
        if (!editImage) return;
        
        isDragging = true;
        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
        editCanvas.style.cursor = 'grabbing';
      }
      
      function handleMouseMove(e) {
        if (!isDragging) return;
        
        const deltaX = e.clientX - lastMouseX;
        const deltaY = e.clientY - lastMouseY;
        
        // Update rotation based on mouse movement only if not locked
        if (!lockLongitude) {
          // Calculate sensitivity based on canvas width to make movement feel natural
          const canvasWidth = editCanvas.offsetWidth;
          const sensitivity = 360 / canvasWidth; // 1 pixel = degrees based on canvas size
          longitudeRotation -= deltaX * sensitivity;
          // Keep longitude in range -180 to 180
          longitudeOffset = longitudeRotation * imageSize.width / 360
          longitudeRotation = ((longitudeRotation + 180) % 360) - 180;
        }
        
        if (!lockLatitude) {
          // Calculate sensitivity based on canvas height
          const canvasHeight = editCanvas.offsetHeight;
          const sensitivity = 180 / canvasHeight; // 1 pixel = degrees based on canvas size
          latitudeRotation += deltaY * sensitivity;
          // Limit latitude to -90 to 90
          latitudeOffset = latitudeRotation * imageSize.width / 360
          latitudeRotation = Math.max(-90, Math.min(90, latitudeRotation));
        }
        
        // Update the display
        updateRotationDisplay();
        
        // Redraw image with new rotation
        drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        
        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
      }
      
      function handleMouseUp() {
        isDragging = false;
        editCanvas.style.cursor = 'grab';
      }
      
      function createRotationTicks() {
        // Create tick marks for the rotation slider
        rotationTicksEl.innerHTML = '';
        
        // Create ticks for +/- 180 degrees
        for (let i = -180; i <= 180; i += 10) {
          const tick = document.createElement('div');
          tick.className = i % 30 === 0 ? 'tick major' : 'tick';
          
          // Position the tick
          const percent = ((i + 180) / 360) * 100;
          tick.style.left = `${percent}%`;
          
          rotationTicksEl.appendChild(tick);
          
          // Add label for major ticks
          if (i % 30 === 0) {
            const label = document.createElement('div');
            label.className = 'tick-label';
            label.style.left = `${percent}%`;
            label.textContent = i + '°';
            label.style.width = "150px"
            label.style.left = "0px"
            label.style.textAlign = "center"
            label.style.position = "relative"
            rotationTicksEl.appendChild(label);
          }
        }
      }
      
      function updateRotationDisplay() {
        // Update the input fields
        longitudeInput.value = longitudeRotation.toFixed(1);
        latitudeInput.value = latitudeRotation.toFixed(1);
        longitudeOffsetDisplay.innerHTML = longitudeOffset.toFixed(1);
        latitudeOffsetDisplay.innerHTML = latitudeOffset.toFixed(1);
        
        // Update the rotation ticks position for longitude
        const ticksOffset = ((longitudeRotation + 180) / 360) * 100;
        rotationTicksEl.style.transform = `translateX(${50 - ticksOffset}%)`;
      }
      
      function resetRotation() {
        longitudeRotation = 0;
        latitudeRotation = 0;
        updateRotationDisplay();
        
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      }
      
      function exportImage() {
        if (!editImage) return;
        
        // Create a temporary canvas for the export
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = editImage.width;
        tempCanvas.height = editImage.height;
        const tempCtx = tempCanvas.getContext('2d');
        
        // Apply the rotation to the original image
        const xOffset = (longitudeRotation / 360) * editImage.width;
        const yOffset = (latitudeRotation / 180) * editImage.height;
        
        tempCtx.drawImage(
          editImage, 
          xOffset, yOffset, editImage.width, editImage.height, 
          0, 0, tempCanvas.width, tempCanvas.height
        );
        tempCtx.drawImage(
          editImage, 
          xOffset - editImage.width, yOffset, editImage.width, editImage.height, 
          0, 0, tempCanvas.width, tempCanvas.height
        );
        
        // Create a download link with custom filename
        const filename = filenameInput.value || 'rotated-equirectangular';
        const link = document.createElement('a');
        link.download = filename + '.png';
        link.href = tempCanvas.toDataURL('image/png');
        link.click();
      }
      
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      // Tab functionality
      let groupingFiles = [];
      let patternAnalysis = null;
      
      // Set up tab switching
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabName = this.getAttribute('data-tab');
          
          // Remove active class from all tabs and contents
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
          
          // Add active class to clicked tab and corresponding content
          this.classList.add('active');
          document.getElementById(tabName + '-tab').classList.add('active');
        });
      });

      // Grouping functionality
      const groupingUpload = document.getElementById('grouping-upload');
      const groupingFileInput = document.getElementById('grouping-file-input');
      const groupingFileList = document.getElementById('grouping-file-list');
      const groupingAnalysis = document.getElementById('grouping-analysis');
      const groupingClearButton = document.getElementById('grouping-clear-button');
      const groupingProcessButton = document.getElementById('grouping-process-button');
      const groupingColumnSelect = document.getElementById('grouping-column-select');
      const groupingPreview = document.getElementById('grouping-preview');
      const groupingPreviewContent = document.getElementById('grouping-preview-content');
      const patternColumns = document.getElementById('pattern-columns');

      // Set up grouping upload area
      groupingUpload.addEventListener('click', () => {
        groupingFileInput.click();
      });

      groupingUpload.addEventListener('dragover', (e) => {
        e.preventDefault();
        groupingUpload.classList.add('dragover');
      });

      groupingUpload.addEventListener('dragleave', (e) => {
        e.preventDefault();
        groupingUpload.classList.remove('dragover');
      });

      groupingUpload.addEventListener('drop', async (e) => {
        e.preventDefault();
        groupingUpload.classList.remove('dragover');
        
        // Handle both files and folders
        const items = Array.from(e.dataTransfer.items);
        const files = [];
        
        // Process all items in parallel for better performance
        const promises = items.map(async (item) => {
          if (item.kind === 'file') {
            const entry = item.webkitGetAsEntry();
            if (entry) {
              return await extractFilesFromEntry(entry);
            }
          }
          return [];
        });
        
        const results = await Promise.all(promises);
        const allFiles = results.flat();
        
        // Show loading indicator for large file sets
        if (allFiles.length > 50) {
          const loadingDiv = document.createElement('div');
          loadingDiv.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border: 2px solid #4a90e2; border-radius: 10px; z-index: 1000; box-shadow: 0 4px 20px rgba(0,0,0,0.3);';
          loadingDiv.innerHTML = `<p>Processing ${allFiles.length} files...</p><div style="width: 200px; height: 4px; background: #f0f0f0; border-radius: 2px; overflow: hidden;"><div id="file-progress" style="width: 0%; height: 100%; background: #4a90e2; transition: width 0.3s;"></div></div>`;
          document.body.appendChild(loadingDiv);
          
          // Process files in batches to avoid blocking the UI
          const batchSize = 100;
          for (let i = 0; i < allFiles.length; i += batchSize) {
            const batch = allFiles.slice(i, i + batchSize);
            addGroupingFiles(batch);
            
            // Update progress
            const progress = ((i + batchSize) / allFiles.length) * 100;
            const progressBar = document.getElementById('file-progress');
            if (progressBar) {
              progressBar.style.width = Math.min(progress, 100) + '%';
            }
            
            // Yield control to allow UI updates
            await new Promise(resolve => setTimeout(resolve, 1));
          }
          
          document.body.removeChild(loadingDiv);
        } else {
          addGroupingFiles(allFiles);
        }
      });

      groupingFileInput.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        addGroupingFiles(files);
      });

      function addGroupingFiles(files) {
        files.forEach(file => {
          if (!groupingFiles.find(f => f.name === file.name && f.size === file.size)) {
            groupingFiles.push(file);
          }
        });
        updateGroupingFileList();
        analyzeFilePatterns();
      }

      function updateGroupingFileList() {
        if (groupingFiles.length === 0) {
          groupingFileList.style.display = 'none';
          groupingAnalysis.style.display = 'none';
          (groupingClearButton as HTMLButtonElement).disabled = true;
          (groupingProcessButton as HTMLButtonElement).disabled = true;
          return;
        }

        groupingFileList.style.display = 'block';
        (groupingClearButton as HTMLButtonElement).disabled = false;

        groupingFileList.innerHTML = '';
        groupingFiles.forEach((file, index) => {
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          
          const fileName = document.createElement('span');
          fileName.className = 'file-name';
          fileName.textContent = file.name;
          
          const fileSize = document.createElement('span');
          fileSize.className = 'file-size';
          fileSize.textContent = formatFileSize(file.size);
          
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-file';
          removeBtn.textContent = 'Remove';
          removeBtn.addEventListener('click', () => {
            groupingFiles.splice(index, 1);
            updateGroupingFileList();
            analyzeFilePatterns();
          });
          
          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fileItem.appendChild(removeBtn);
          groupingFileList.appendChild(fileItem);
        });
      }

      function analyzeFilePatterns() {
        if (groupingFiles.length < 2) {
          groupingAnalysis.style.display = 'none';
          return;
        }

        // Extract filenames without extensions
        const filenames = groupingFiles.map(file => {
          const name = file.name;
          return name.substring(0, name.lastIndexOf('.')) || name;
        });

        // Find common patterns
        const patterns = findCommonPatterns(filenames);
        
        if (patterns.length > 0) {
          patternAnalysis = patterns;
          displayPatternColumns(patterns);
          groupingAnalysis.style.display = 'block';
          (groupingProcessButton as HTMLButtonElement).disabled = false;
        } else {
          groupingAnalysis.style.display = 'none';
          (groupingProcessButton as HTMLButtonElement).disabled = true;
        }
      }

      function findCommonPatterns(filenames) {
        if (filenames.length < 2) return [];

        // Use LCS-based pattern detection
        return findLCSPatterns(filenames);
      }

      function findLCSPatterns(filenames) {
        if (filenames.length < 2) return [];
        
        // Find all common substrings across all filenames
        const commonSubstrings = findAllCommonSubstrings(filenames);
        
        // Sort by length (longest first) and filter out overlapping patterns
        const sortedPatterns = commonSubstrings
          .sort((a, b) => b.length - a.length)
          .filter(pattern => pattern.length > 2); // Only consider patterns longer than 2 chars
        
        // Group patterns by their position and create columns
        const patterns = [];
        const usedPositions = new Set();
        
        for (const pattern of sortedPatterns) {
          // Check if this pattern overlaps with already used positions
          let overlaps = false;
          for (const usedPattern of patterns) {
            if (patternOverlaps({pattern: pattern}, usedPattern, filenames)) {
              overlaps = true;
              break;
            }
          }
          
          if (!overlaps) {
            // Find all unique values at this pattern's position
            const uniqueValues = findUniqueValuesAtPattern(filenames, pattern as string);
            
            if (uniqueValues.length > 1) {
              patterns.push({
                type: 'lcs',
                pattern: pattern as string,
                value: uniqueValues.join(', '),
                unique: uniqueValues,
                positions: findPatternPositions(filenames, pattern as string)
              });
            }
          }
        }
        
        return patterns;
      }

      function findAllCommonSubstrings(filenames: string[]): string[] {
        const commonSubstrings = new Set<string>();
        
        // Compare each pair of filenames
        for (let i = 0; i < filenames.length; i++) {
          for (let j = i + 1; j < filenames.length; j++) {
            const substrings = findCommonSubstringsBetween(filenames[i], filenames[j]);
            substrings.forEach(sub => commonSubstrings.add(sub));
          }
        }
        
        return Array.from(commonSubstrings);
      }

      function findCommonSubstringsBetween(str1: string, str2: string): string[] {
        const substrings = new Set<string>();
        
        // Find all common substrings of length 3 or more
        for (let len = 3; len <= Math.min(str1.length, str2.length); len++) {
          for (let i = 0; i <= str1.length - len; i++) {
            const substr = str1.substring(i, i + len);
            if (str2.includes(substr)) {
              substrings.add(substr);
            }
          }
        }
        
        return Array.from(substrings);
      }

      function patternOverlaps(pattern1: any, pattern2: any, filenames: string[]) {
        // Check if two patterns overlap in any filename
        for (const filename of filenames) {
          const pos1 = filename.indexOf(pattern1.pattern);
          const pos2 = filename.indexOf(pattern2.pattern);
          
          if (pos1 !== -1 && pos2 !== -1) {
            const end1 = pos1 + pattern1.pattern.length;
            const end2 = pos2 + pattern2.pattern.length;
            
            // Check for overlap
            if (pos1 < end2 && pos2 < end1) {
              return true;
            }
          }
        }
        return false;
      }

      function findUniqueValuesAtPattern(filenames, pattern) {
        const values = new Set();
        
        for (const filename of filenames) {
          const pos = filename.indexOf(pattern);
          if (pos !== -1) {
            // Extract the part before the pattern
            const before = filename.substring(0, pos);
            // Extract the part after the pattern
            const after = filename.substring(pos + pattern.length);
            
            // Find the next common delimiter or end
            const nextDelimiter = findNextDelimiter(after);
            const value = after.substring(0, nextDelimiter);
            
            if (value) {
              values.add(value);
            }
          }
        }
        
        return Array.from(values);
      }

      function findNextDelimiter(str) {
        const delimiters = ['_', '-', '.', ' '];
        let minPos = str.length;
        
        for (const delimiter of delimiters) {
          const pos = str.indexOf(delimiter);
          if (pos !== -1 && pos < minPos) {
            minPos = pos;
          }
        }
        
        return minPos;
      }

      function findPatternPositions(filenames, pattern) {
        const positions = [];
        
        for (const filename of filenames) {
          const pos = filename.indexOf(pattern);
          if (pos !== -1) {
            positions.push(pos);
          }
        }
        
        return positions;
      }

      function findDelimiterPatterns(filenames) {
        const patterns = [];
        
        // Common delimiters to try
        const delimiters = ['_', '-', '.', ' '];
        
        for (const delimiter of delimiters) {
          const splitResults = filenames.map(name => name.split(delimiter));
          
          // Check if all filenames have the same number of parts
          const partCounts = splitResults.map(parts => parts.length);
          const uniquePartCounts = new Set(partCounts);
          
          if (uniquePartCounts.size === 1) {
            const partCount = partCounts[0];
            
            // Analyze each position
            for (let pos = 0; pos < partCount; pos++) {
              const valuesAtPos = new Set();
              
              splitResults.forEach(parts => {
                if (pos < parts.length) {
                  valuesAtPos.add(parts[pos]);
                }
              });
              
              // If we have multiple unique values at this position, it's a variable column
              if (valuesAtPos.size > 1) {
                const uniqueValues = Array.from(valuesAtPos);
                patterns.push({
                  type: 'delimiter',
                  delimiter: delimiter,
                  position: pos,
                  value: uniqueValues.join(', '),
                  unique: uniqueValues
                });
              }
            }
            
            // If we found patterns with this delimiter, return them
            if (patterns.length > 0) {
              return patterns;
            }
          }
        }
        
        return [];
      }

      function analyzeMiddlePatterns(filenames, prefix, suffix) {
        const patterns = [];
        const middleParts = filenames.map(name => {
          const start = prefix.length;
          const end = name.length - suffix.length;
          return name.substring(start, end);
        });

        // Group similar middle parts
        const groups = new Map();
        middleParts.forEach(part => {
          if (!groups.has(part)) {
            groups.set(part, []);
          }
          groups.get(part).push(part);
        });

        // Create pattern objects
        const uniqueParts = Array.from(groups.keys());
        if (uniqueParts.length > 1) {
          patterns.push({
            type: 'middle',
            value: uniqueParts.join(', '),
            unique: uniqueParts
          });
        }

        return patterns;
      }

      function findCommonSubstrings(filenames) {
        const patterns = [];
        
        // Find common substrings by analyzing character positions
        const maxLength = Math.max(...filenames.map(f => f.length));
        
        for (let pos = 0; pos < maxLength; pos++) {
          const charsAtPos = new Set();
          const validFiles = [];
          
          filenames.forEach((name, index) => {
            if (pos < name.length) {
              charsAtPos.add(name[pos]);
              validFiles.push(index);
            }
          });
          
          if (charsAtPos.size > 1 && charsAtPos.size < filenames.length) {
            // Found a position with variation
            const uniqueChars = Array.from(charsAtPos);
            patterns.push({
              type: 'position',
              position: pos,
              value: uniqueChars.join(', '),
              unique: uniqueChars
            });
          }
        }
        
        return patterns;
      }

      function displayPatternColumns(patterns) {
        patternColumns.innerHTML = '';
        groupingColumnSelect.innerHTML = '<option value="">Select a column to group by...</option>';
        
        patterns.forEach((pattern, index) => {
          const columnDiv = document.createElement('div');
          columnDiv.style.cssText = 'margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9;';
          
          const title = document.createElement('h4');
          title.style.margin = '0 0 10px 0';
          
          if (pattern.type === 'delimiter') {
            title.textContent = `Column ${index + 1} (${pattern.delimiter}-separated, position ${pattern.position + 1})`;
          } else {
            title.textContent = `Column ${index + 1} (${pattern.type})`;
          }
          
          const value = document.createElement('p');
          value.style.margin = '5px 0';
          value.textContent = `Values: ${pattern.value}`;
          
          const unique = document.createElement('p');
          unique.style.margin = '5px 0; font-size: 0.9em; color: #666;';
          unique.textContent = `Unique options: ${pattern.unique.length}`;
          
          columnDiv.appendChild(title);
          columnDiv.appendChild(value);
          columnDiv.appendChild(unique);
          patternColumns.appendChild(columnDiv);
          
          // Add option to select dropdown
          const option = document.createElement('option');
          option.value = index.toString();
          option.textContent = `Column ${index + 1} (${pattern.unique.length} groups)`;
          groupingColumnSelect.appendChild(option);
        });
      }

      // Handle column selection for grouping
      groupingColumnSelect.addEventListener('change', function() {
        const selectedIndex = parseInt((this as HTMLSelectElement).value);
        if (selectedIndex >= 0 && patternAnalysis) {
          showGroupingPreview(selectedIndex);
        } else {
          groupingPreview.style.display = 'none';
        }
      });

      function showGroupingPreview(columnIndex) {
        const pattern = patternAnalysis[columnIndex];
        const filenames = groupingFiles.map(file => {
          const name = file.name;
          return name.substring(0, name.lastIndexOf('.')) || name;
        });

        // Group files by the selected pattern
        const groups = new Map();
        
        filenames.forEach((filename, fileIndex) => {
          let groupKey = '';
          
          if (pattern.type === 'prefix') {
            groupKey = pattern.value;
          } else if (pattern.type === 'suffix') {
            groupKey = pattern.value;
          } else if (pattern.type === 'middle') {
            const start = patternAnalysis[0]?.value?.length || 0;
            const end = filename.length - (patternAnalysis[patternAnalysis.length - 1]?.value?.length || 0);
            groupKey = filename.substring(start, end);
          } else if (pattern.type === 'position') {
            groupKey = filename[pattern.position] || '';
          } else if (pattern.type === 'delimiter') {
            const parts = filename.split(pattern.delimiter);
            groupKey = parts[pattern.position] || '';
          }
          
          if (!groups.has(groupKey)) {
            groups.set(groupKey, []);
          }
          groups.get(groupKey).push(groupingFiles[fileIndex]);
        });

        // Display preview
        groupingPreviewContent.innerHTML = '';
        groups.forEach((files, groupName) => {
          const groupDiv = document.createElement('div');
          groupDiv.style.cssText = 'margin: 10px 0; padding: 10px; border: 1px solid #ccc; border-radius: 3px; background-color: white;';
          
          const groupTitle = document.createElement('h5');
          groupTitle.style.margin = '0 0 5px 0';
          groupTitle.textContent = `Folder: "${groupName}" (${files.length} files)`;
          
          const fileList = document.createElement('ul');
          fileList.style.margin = '5px 0; padding-left: 20px; font-size: 0.9em;';
          
          files.forEach(file => {
            const li = document.createElement('li');
            li.textContent = file.name;
            fileList.appendChild(li);
          });
          
          groupDiv.appendChild(groupTitle);
          groupDiv.appendChild(fileList);
          groupingPreviewContent.appendChild(groupDiv);
        });

        groupingPreview.style.display = 'block';
      }

      groupingClearButton.addEventListener('click', () => {
        groupingFiles = [];
        patternAnalysis = null;
        updateGroupingFileList();
        groupingAnalysis.style.display = 'none';
        groupingPreview.style.display = 'none';
      });

      groupingProcessButton.addEventListener('click', async () => {
        const selectedIndex = parseInt((groupingColumnSelect as HTMLSelectElement).value);
        if (selectedIndex < 0 || !patternAnalysis) return;

        const pattern = patternAnalysis[selectedIndex];
        const filenames = groupingFiles.map(file => {
          const name = file.name;
          return name.substring(0, name.lastIndexOf('.')) || name;
        });

        // Group files
        const groups = new Map();
        
        filenames.forEach((filename, fileIndex) => {
          let groupKey = '';
          
          if (pattern.type === 'prefix') {
            groupKey = pattern.value;
          } else if (pattern.type === 'suffix') {
            groupKey = pattern.value;
          } else if (pattern.type === 'middle') {
            const start = patternAnalysis[0]?.value?.length || 0;
            const end = filename.length - (patternAnalysis[patternAnalysis.length - 1]?.value?.length || 0);
            groupKey = filename.substring(start, end);
          } else if (pattern.type === 'position') {
            groupKey = filename[pattern.position] || '';
          } else if (pattern.type === 'delimiter') {
            const parts = filename.split(pattern.delimiter);
            groupKey = parts[pattern.position] || '';
          }
          
          if (!groups.has(groupKey)) {
            groups.set(groupKey, []);
          }
          groups.get(groupKey).push(groupingFiles[fileIndex]);
        });

        // Create zip with grouped folders
        try {
          const zip = new JSZip();

          groups.forEach((files, groupName) => {
            const folder = zip.folder(groupName);
            
            files.forEach(file => {
              folder.file(file.name, file);
            });
          });

          const content = await zip.generateAsync({ type: 'blob' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(content);
          link.download = 'grouped_files.zip';
          link.click();
          URL.revokeObjectURL(link.href);
          
          alert(`Successfully created ${groups.size} folders with ${groupingFiles.length} total files!`);
        } catch (error) {
          console.error('Error creating grouped folders:', error);
          alert('Error creating grouped folders. Please try again.');
        }
      });

      // Tab functionality
      let batchFiles = [];
      
      // Set up tab switching
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabName = this.getAttribute('data-tab');
          
          // Remove active class from all tabs and contents
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
          
          // Add active class to clicked tab and corresponding content
          this.classList.add('active');
          document.getElementById(tabName + '-tab').classList.add('active');
        });
      });

      // Batch upload functionality
      const batchUpload = document.getElementById('batch-upload');
      const batchFileInput = document.getElementById('batch-file-input');
      const batchFileList = document.getElementById('batch-file-list');
      const batchClearButton = document.getElementById('batch-clear-button');
      const batchProcessButton = document.getElementById('batch-process-button');
      const batchProgressBar = document.getElementById('batch-progress-bar');
      const batchProgressFill = document.getElementById('batch-progress-fill');
      const batchRotationInput = document.getElementById('batch-rotation-input');
      const batchPrefixInput = document.getElementById('batch-prefix-input');

      // Set up batch upload area
      batchUpload.addEventListener('click', () => {
        batchFileInput.click();
      });

      batchUpload.addEventListener('dragover', (e) => {
        e.preventDefault();
        batchUpload.classList.add('dragover');
      });

      batchUpload.addEventListener('dragleave', (e) => {
        e.preventDefault();
        batchUpload.classList.remove('dragover');
      });

      batchUpload.addEventListener('drop', async (e) => {
        e.preventDefault();
        batchUpload.classList.remove('dragover');
        
        // Handle both files and folders
        const items = Array.from(e.dataTransfer.items);
        
        // Process all items in parallel for better performance
        const promises = items.map(async (item) => {
          if (item.kind === 'file') {
            const entry = item.webkitGetAsEntry();
            if (entry) {
              return await extractFilesFromEntry(entry);
            }
          }
          return [];
        });
        
        const results = await Promise.all(promises);
        const allFiles = results.flat();
        
        // Filter for image files only
        const imageFiles = allFiles.filter(file => file.type.startsWith('image/'));
        addBatchFiles(imageFiles);
      });

      batchFileInput.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        addBatchFiles(files);
      });

      function addBatchFiles(files) {
        files.forEach(file => {
          if (!batchFiles.find(f => f.name === file.name && f.size === file.size)) {
            batchFiles.push(file);
          }
        });
        updateBatchFileList();
      }

      function updateBatchFileList() {
        if (batchFiles.length === 0) {
          batchFileList.style.display = 'none';
          (batchClearButton as HTMLButtonElement).disabled = true;
          (batchProcessButton as HTMLButtonElement).disabled = true;
          return;
        }

        batchFileList.style.display = 'block';
        (batchClearButton as HTMLButtonElement).disabled = false;
        (batchProcessButton as HTMLButtonElement).disabled = false;

        batchFileList.innerHTML = '';
        batchFiles.forEach((file, index) => {
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          
          const fileName = document.createElement('span');
          fileName.className = 'file-name';
          fileName.textContent = file.name;
          
          const fileSize = document.createElement('span');
          fileSize.className = 'file-size';
          fileSize.textContent = formatFileSize(file.size);
          
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-file';
          removeBtn.textContent = 'Remove';
          removeBtn.addEventListener('click', () => {
            batchFiles.splice(index, 1);
            updateBatchFileList();
          });
          
          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fileItem.appendChild(removeBtn);
          batchFileList.appendChild(fileItem);
        });
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }

      batchClearButton.addEventListener('click', () => {
        batchFiles = [];
        updateBatchFileList();
      });

      batchProcessButton.addEventListener('click', async () => {
        if (batchFiles.length === 0) return;

        const rotationDegrees = parseFloat(batchRotationInput.value) || 0;
        const prefix = batchPrefixInput.value || '';
        const preserveStructure = (document.getElementById('preserve-structure') as HTMLInputElement).checked;
        
                 // Show progress bar
         batchProgressBar.style.display = 'block';
         (batchProcessButton as HTMLButtonElement).disabled = true;
         (batchClearButton as HTMLButtonElement).disabled = true;

         // Create JSZip instance for batch download
         const zip = new JSZip();

         for (let i = 0; i < batchFiles.length; i++) {
           const file = batchFiles[i];
           const progress = ((i + 1) / batchFiles.length) * 100;
           
           // Update progress bar
           batchProgressFill.style.width = progress + '%';
           
           try {
             // Load image
             const img = await loadImageFromFile(file) as HTMLImageElement;
             
             // Create canvas and apply rotation
             const canvas = document.createElement('canvas');
             canvas.width = img.width;
             canvas.height = img.height;
             const ctx = canvas.getContext('2d');
             
             // Apply rotation
             const xOffset = (rotationDegrees / 360) * img.width;
             const normalizedXOffset = ((xOffset % img.width) + img.width) % img.width;
             const availableWidth = img.width - normalizedXOffset;
             
             // Draw the rotated image
             ctx.drawImage(
               img,
               normalizedXOffset, 0, availableWidth, img.height,
               0, 0, availableWidth, img.height
             );
             
             if (availableWidth < img.width) {
               const remainingWidth = img.width - availableWidth;
               ctx.drawImage(
                 img,
                 0, 0, remainingWidth, img.height,
                 availableWidth, 0, remainingWidth, img.height
               );
             }
            
                         // Convert to blob and add to zip
             const blob = await new Promise(resolve => {
               canvas.toBlob(resolve, 'image/png');
             });
             
             // Use relative path if available and preserve structure is enabled
             const originalPath = (file as any).relativePath || file.name;
             const pathParts = originalPath.split('/');
             const filename = pathParts.pop().replace(/\.[^/.]+$/, '') + '.png';
             
             let fullPath;
             if (preserveStructure && pathParts.length > 0) {
               // Preserve folder structure
               const directory = pathParts.join('/');
               fullPath = prefix ? `${prefix}${directory}/${filename}` : `${directory}/${filename}`;
             } else {
               // Flatten to root level
               fullPath = prefix ? `${prefix}${filename}` : filename;
             }
             
             zip.file(fullPath, blob);
            
          } catch (error) {
            console.error('Error processing file:', file.name, error);
          }
        }

        // Generate and download zip file
        try {
          const content = await zip.generateAsync({ type: 'blob' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(content);
          link.download = 'batch_rotated_images.zip';
          link.click();
          URL.revokeObjectURL(link.href);
        } catch (error) {
          console.error('Error creating zip file:', error);
        }

                 // Reset UI
         batchProgressBar.style.display = 'none';
         batchProgressFill.style.width = '0%';
         (batchProcessButton as HTMLButtonElement).disabled = false;
         (batchClearButton as HTMLButtonElement).disabled = false;
      });

      function loadImageFromFile(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = reject;
            img.src = e.target.result;
          };
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
      }

      // Auto-alignment functionality
      const alignmentMethod = document.getElementById('alignment-method');
      const edgeOptions = document.getElementById('edge-options');
      const featureOptions = document.getElementById('feature-options');
      const phaseOptions = document.getElementById('phase-options');
      const startAlignmentBtn = document.getElementById('start-alignment');
      const alignmentProgressBar = document.getElementById('alignment-progress-bar');
      const alignmentProgressFill = document.getElementById('alignment-progress-fill');
      const cornerThreshold = document.getElementById('corner-threshold');
      const thresholdValue = document.getElementById('threshold-value');
      const showEdgeOverlayBtn = document.getElementById('show-edge-overlay');

      // Edge overlay state
      let edgeOverlayVisible = false;

      // Enable alignment button when both images are loaded
      function checkAlignmentReady() {
        const canAlign = referenceImage && editImage;
        (startAlignmentBtn as HTMLButtonElement).disabled = !canAlign;
        (showEdgeOverlayBtn as HTMLButtonElement).disabled = !canAlign;
      }

      // Update alignment UI based on method selection
      alignmentMethod.addEventListener('change', function() {
        const method = (this as HTMLSelectElement).value;
        edgeOptions.style.display = method === 'edge' ? 'block' : 'none';
        featureOptions.style.display = method === 'feature' ? 'block' : 'none';
        phaseOptions.style.display = method === 'phase' ? 'block' : 'none';
      });

      // Update threshold display
      cornerThreshold.addEventListener('input', function() {
        thresholdValue.textContent = (this as HTMLInputElement).value;
      });

      // Edge overlay toggle
      showEdgeOverlayBtn.addEventListener('click', () => {
        if (edgeOverlayVisible) {
          hideEdgeOverlays();
          (showEdgeOverlayBtn as HTMLButtonElement).textContent = 'Show Edge Overlay';
          edgeOverlayVisible = false;
        } else {
          showEdgeOverlays();
          (showEdgeOverlayBtn as HTMLButtonElement).textContent = 'Hide Edge Overlay';
          edgeOverlayVisible = true;
        }
      });

      // Update edge overlay when edge method changes
      document.getElementById('edge-method')?.addEventListener('change', () => {
        if (edgeOverlayVisible) {
          showEdgeOverlays(); // Refresh overlays with new method
        }
      });

      // Start alignment process
      startAlignmentBtn.addEventListener('click', async () => {
        if (!referenceImage || !editImage) return;

        const method = (alignmentMethod as HTMLSelectElement).value;
        alignmentProgressBar.style.display = 'block';
        (startAlignmentBtn as HTMLButtonElement).disabled = true;

        try {
          let bestRotation = 0;
          
          if (method === 'edge') {
            bestRotation = await performEdgeAlignment();
          } else if (method === 'feature') {
            bestRotation = await performFeatureAlignment();
          } else if (method === 'phase') {
            bestRotation = await performPhaseAlignment();
          }

          // Apply the detected rotation
          longitudeRotation = bestRotation;
          updateRotationDisplay();
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);

        } catch (error) {
          console.error('Alignment failed:', error);
          alert('Auto-alignment failed. Please try a different method or align manually.');
        }

        alignmentProgressBar.style.display = 'none';
        (startAlignmentBtn as HTMLButtonElement).disabled = false;
      });

      // Edge Detection Alignment
      async function performEdgeAlignment() {
        const edgeMethod = (document.getElementById('edge-method') as HTMLSelectElement).value;
        
        // Create canvases for processing
        const refCanvas = document.createElement('canvas');
        const editCanvas = document.createElement('canvas');
        const size = 512; // Downsample for faster processing
        
        refCanvas.width = editCanvas.width = size;
        refCanvas.height = editCanvas.height = size;
        
        const refCtx = refCanvas.getContext('2d');
        const editCtx = editCanvas.getContext('2d');
        
        // Draw downsampled images
        refCtx.drawImage(referenceImage, 0, 0, size, size);
        editCtx.drawImage(editImage, 0, 0, size, size);
        
        // Get edge maps - reference (whitecard) and editor (detailed)
        const refEdges = detectEdges(refCtx, size, size, edgeMethod);
        const editEdges = detectEdges(editCtx, size, size, edgeMethod);
        
        let bestScore = 0;
        let bestRotation = 0;
        const searchRange = 180; // degrees
        const step = 1; // degree steps
        
        for (let angle = -searchRange; angle <= searchRange; angle += step) {
          alignmentProgressFill.style.width = ((angle + searchRange) / (searchRange * 2)) * 100 + '%';
          
          // Rotate the REFERENCE edge map (whitecard) to fit into the editor
          const rotatedRefEdges = rotateEdgeMap(refEdges, size, size, angle);
          
          // Calculate fitting score: how well reference edges fit into editor edges
          const score = calculateEdgeFitting(rotatedRefEdges, editEdges, size, size);
          
          if (score > bestScore) {
            bestScore = score;
            bestRotation = angle;
          }
          
          // Yield control to prevent blocking
          if (angle % 10 === 0) {
            await new Promise(resolve => setTimeout(resolve, 1));
          }
        }
        
        return bestRotation;
      }

      // Feature Point Alignment
      async function performFeatureAlignment() {
        const threshold = parseFloat((cornerThreshold as HTMLInputElement).value);
        
        // Downsample for processing
        const size = 512;
        const refCanvas = document.createElement('canvas');
        const editCanvas = document.createElement('canvas');
        
        refCanvas.width = editCanvas.width = size;
        refCanvas.height = editCanvas.height = size;
        
        const refCtx = refCanvas.getContext('2d');
        const editCtx = editCanvas.getContext('2d');
        
        refCtx.drawImage(referenceImage, 0, 0, size, size);
        editCtx.drawImage(editImage, 0, 0, size, size);
        
        // Detect corner features
        const refCorners = detectHarrisCorners(refCtx, size, size, threshold);
        
        let bestScore = 0;
        let bestRotation = 0;
        const searchRange = 180;
        const step = 2; // Larger steps for feature matching
        
        for (let angle = -searchRange; angle <= searchRange; angle += step) {
          alignmentProgressFill.style.width = ((angle + searchRange) / (searchRange * 2)) * 100 + '%';
          
          // Create rotated version
          const rotatedCanvas = document.createElement('canvas');
          rotatedCanvas.width = rotatedCanvas.height = size;
          const rotatedCtx = rotatedCanvas.getContext('2d');
          
          const xOffset = (angle / 360) * size;
          const normalizedOffset = ((xOffset % size) + size) % size;
          const availableWidth = size - normalizedOffset;
          
          rotatedCtx.drawImage(editImage, normalizedOffset, 0, availableWidth, editImage.height, 0, 0, availableWidth, size);
          if (normalizedOffset > 0) {
            rotatedCtx.drawImage(editImage, 0, 0, normalizedOffset, editImage.height, availableWidth, 0, normalizedOffset, size);
          }
          
          const editCorners = detectHarrisCorners(rotatedCtx, size, size, threshold);
          const score = matchFeaturePoints(refCorners, editCorners);
          
          if (score > bestScore) {
            bestScore = score;
            bestRotation = angle;
          }
          
          if (angle % 10 === 0) {
            await new Promise(resolve => setTimeout(resolve, 1));
          }
        }
        
        return bestRotation;
      }

      // Phase Correlation Alignment
      async function performPhaseAlignment() {
        const downsample = parseInt((document.getElementById('downsample-factor') as HTMLSelectElement).value);
        const size = Math.floor(512 / downsample);
        
        // Create processing canvases
        const refCanvas = document.createElement('canvas');
        const editCanvas = document.createElement('canvas');
        
        refCanvas.width = editCanvas.width = size;
        refCanvas.height = editCanvas.height = size;
        
        const refCtx = refCanvas.getContext('2d');
        const editCtx = editCanvas.getContext('2d');
        
        refCtx.drawImage(referenceImage, 0, 0, size, size);
        editCtx.drawImage(editImage, 0, 0, size, size);
        
        // Convert to grayscale and get image data
        const refData = getGrayscaleData(refCtx, size, size);
        const editData = getGrayscaleData(editCtx, size, size);
        
        let bestScore = 0;
        let bestRotation = 0;
        const searchRange = 180;
        const step = 2;
        
        for (let angle = -searchRange; angle <= searchRange; angle += step) {
          alignmentProgressFill.style.width = ((angle + searchRange) / (searchRange * 2)) * 100 + '%';
          
          // Create rotated version of edit data
          const rotatedData = rotateImageData(editData, size, size, angle);
          
          // Calculate normalized cross-correlation
          const score = calculateNormalizedCrossCorrelation(refData, rotatedData);
          
          if (score > bestScore) {
            bestScore = score;
            bestRotation = angle;
          }
          
          if (angle % 10 === 0) {
            await new Promise(resolve => setTimeout(resolve, 1));
          }
                 }
         
         return bestRotation;
       }

       // Gaussian Blur Function for Pattern-Based Matching
       function applyGaussianBlur(data, width, height, sigma) {
         const blurred = new Float32Array(width * height);
         const kernel = createGaussianKernel(sigma);
         const kernelSize = kernel.length;
         const halfKernel = Math.floor(kernelSize / 2);
         
         // Apply separable Gaussian blur (horizontal then vertical)
         const temp = new Float32Array(width * height);
         
         // Horizontal pass
         for (let y = 0; y < height; y++) {
           for (let x = 0; x < width; x++) {
             let sum = 0;
             let weightSum = 0;
             
             for (let k = 0; k < kernelSize; k++) {
               const dx = k - halfKernel;
               const sourceX = (x + dx + width) % width; // Wrap for equirectangular
               const weight = kernel[k];
               sum += data[y * width + sourceX] * weight;
               weightSum += weight;
             }
             
             temp[y * width + x] = sum / weightSum;
           }
         }
         
         // Vertical pass
         for (let y = 0; y < height; y++) {
           for (let x = 0; x < width; x++) {
             let sum = 0;
             let weightSum = 0;
             
             for (let k = 0; k < kernelSize; k++) {
               const dy = k - halfKernel;
               const sourceY = Math.max(0, Math.min(height - 1, y + dy)); // Clamp for vertical
               const weight = kernel[k];
               sum += temp[sourceY * width + x] * weight;
               weightSum += weight;
             }
             
             blurred[y * width + x] = sum / weightSum;
           }
         }
         
         return blurred;
       }

       function createGaussianKernel(sigma) {
         const size = Math.ceil(sigma * 6); // 6 sigma rule
         const kernel = new Float32Array(size);
         const center = Math.floor(size / 2);
         let sum = 0;
         
         for (let i = 0; i < size; i++) {
           const x = i - center;
           kernel[i] = Math.exp(-(x * x) / (2 * sigma * sigma));
           sum += kernel[i];
         }
         
         // Normalize
         for (let i = 0; i < size; i++) {
           kernel[i] /= sum;
         }
         
         return kernel;
       }

       // Edge Detection Functions
       function detectEdges(ctx, width, height, method) {
         const imageData = ctx.getImageData(0, 0, width, height);
         const data = imageData.data;
         
         // Convert to grayscale first
         const grayscale = new Float32Array(width * height);
         for (let i = 0; i < width * height; i++) {
           const pixelIdx = i * 4;
           grayscale[i] = data[pixelIdx] * 0.299 + data[pixelIdx + 1] * 0.587 + data[pixelIdx + 2] * 0.114;
         }
         
         // Apply Gaussian blur to grayscale for pattern matching (sigma = 1.5)
         const blurredGrayscale = applyGaussianBlur(grayscale, width, height, 1.5);
         
         const edges = new Float32Array(width * height);
         
         // Apply edge detection to blurred grayscale
         for (let y = 1; y < height - 1; y++) {
           for (let x = 1; x < width - 1; x++) {
             const idx = y * width + x;
             let edgeValue = 0;
             
             if (method === 'canny' || method === 'sobel') {
               // Sobel operator
               const gx = 
                 -1 * blurredGrayscale[(y-1) * width + (x-1)] + 1 * blurredGrayscale[(y-1) * width + (x+1)] +
                 -2 * blurredGrayscale[y * width + (x-1)] + 2 * blurredGrayscale[y * width + (x+1)] +
                 -1 * blurredGrayscale[(y+1) * width + (x-1)] + 1 * blurredGrayscale[(y+1) * width + (x+1)];
               
               const gy = 
                 -1 * blurredGrayscale[(y-1) * width + (x-1)] + -2 * blurredGrayscale[(y-1) * width + x] + -1 * blurredGrayscale[(y-1) * width + (x+1)] +
                  1 * blurredGrayscale[(y+1) * width + (x-1)] +  2 * blurredGrayscale[(y+1) * width + x] +  1 * blurredGrayscale[(y+1) * width + (x+1)];
               
               edgeValue = Math.sqrt(gx * gx + gy * gy);
             } else if (method === 'prewitt') {
               // Prewitt operator
               const gx = 
                 -1 * blurredGrayscale[(y-1) * width + (x-1)] + 1 * blurredGrayscale[(y-1) * width + (x+1)] +
                 -1 * blurredGrayscale[y * width + (x-1)] + 1 * blurredGrayscale[y * width + (x+1)] +
                 -1 * blurredGrayscale[(y+1) * width + (x-1)] + 1 * blurredGrayscale[(y+1) * width + (x+1)];
               
               const gy = 
                 -1 * blurredGrayscale[(y-1) * width + (x-1)] + -1 * blurredGrayscale[(y-1) * width + x] + -1 * blurredGrayscale[(y-1) * width + (x+1)] +
                  1 * blurredGrayscale[(y+1) * width + (x-1)] +  1 * blurredGrayscale[(y+1) * width + x] +  1 * blurredGrayscale[(y+1) * width + (x+1)];
               
               edgeValue = Math.sqrt(gx * gx + gy * gy);
             } else if (method === 'roberts') {
               // Roberts cross-gradient
               const gx = blurredGrayscale[y * width + x] - blurredGrayscale[(y+1) * width + (x+1)];
               const gy = blurredGrayscale[y * width + (x+1)] - blurredGrayscale[(y+1) * width + x];
               edgeValue = Math.sqrt(gx * gx + gy * gy);
             }
             
             edges[idx] = edgeValue;
           }
         }
         
         // Apply additional blur to the edge map for smoother pattern matching
         return applyGaussianBlur(edges, width, height, 1.0);
       }



       function getGrayValue(data, x, y, width) {
         const idx = (y * width + x) * 4;
         return data[idx] * 0.299 + data[idx + 1] * 0.587 + data[idx + 2] * 0.114;
       }

               function calculateEdgeCorrelation(edges1, edges2) {
          let correlation = 0;
          let sum1 = 0, sum2 = 0;
          const length = edges1.length;
          
          for (let i = 0; i < length; i++) {
            correlation += edges1[i] * edges2[i];
            sum1 += edges1[i] * edges1[i];
            sum2 += edges2[i] * edges2[i];
          }
          
          return correlation / Math.sqrt(sum1 * sum2);
        }

        // Rotate edge map horizontally for equirectangular images
        function rotateEdgeMap(edges, width, height, angleDegrees) {
          const rotated = new Float32Array(width * height);
          const xOffset = (angleDegrees / 360) * width;
          const normalizedOffset = ((xOffset % width) + width) % width;
          
          for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
              const sourceX = (x + normalizedOffset) % width;
              const sourceIdx = y * width + Math.floor(sourceX);
              const targetIdx = y * width + x;
              rotated[targetIdx] = edges[sourceIdx] || 0;
            }
          }
          
          return rotated;
        }

        // Calculate how well reference edges fit into editor edges (for blurred pattern matching)
        function calculateEdgeFitting(refEdges, editEdges, width, height) {
          // For blurred edges, we use normalized cross-correlation instead of exact matching
          let correlation = 0;
          let refSum = 0;
          let editSum = 0;
          let refSumSq = 0;
          let editSumSq = 0;
          let validPixels = 0;
          
          // Calculate means and correlation over the overlapping area
          for (let i = 0; i < refEdges.length; i++) {
            const refVal = refEdges[i];
            const editVal = editEdges[i];
            
            // Only consider pixels with some edge strength
            if (refVal > 5 || editVal > 5) {
              correlation += refVal * editVal;
              refSum += refVal;
              editSum += editVal;
              refSumSq += refVal * refVal;
              editSumSq += editVal * editVal;
              validPixels++;
            }
          }
          
          if (validPixels === 0) return 0;
          
          // Calculate normalized cross-correlation
          const refMean = refSum / validPixels;
          const editMean = editSum / validPixels;
          
          let numerator = 0;
          let refVar = 0;
          let editVar = 0;
          
          for (let i = 0; i < refEdges.length; i++) {
            const refVal = refEdges[i];
            const editVal = editEdges[i];
            
            if (refVal > 5 || editVal > 5) {
              const refCentered = refVal - refMean;
              const editCentered = editVal - editMean;
              
              numerator += refCentered * editCentered;
              refVar += refCentered * refCentered;
              editVar += editCentered * editCentered;
            }
          }
          
          const denominator = Math.sqrt(refVar * editVar);
          
          // Return normalized correlation coefficient (0 to 1)
          return denominator > 0 ? Math.max(0, numerator / denominator) : 0;
        }

       // Harris Corner Detection
       function detectHarrisCorners(ctx, width, height, threshold) {
         const imageData = ctx.getImageData(0, 0, width, height);
         const data = imageData.data;
         const corners = [];
         
         // Calculate gradients
         const Ix = new Float32Array(width * height);
         const Iy = new Float32Array(width * height);
         
         for (let y = 1; y < height - 1; y++) {
           for (let x = 1; x < width - 1; x++) {
             const idx = y * width + x;
             
             // Sobel gradients
             Ix[idx] = 
               -1 * getGrayValue(data, x-1, y-1, width) + 1 * getGrayValue(data, x+1, y-1, width) +
               -2 * getGrayValue(data, x-1, y,   width) + 2 * getGrayValue(data, x+1, y,   width) +
               -1 * getGrayValue(data, x-1, y+1, width) + 1 * getGrayValue(data, x+1, y+1, width);
             
             Iy[idx] = 
               -1 * getGrayValue(data, x-1, y-1, width) + -2 * getGrayValue(data, x, y-1, width) + -1 * getGrayValue(data, x+1, y-1, width) +
                1 * getGrayValue(data, x-1, y+1, width) +  2 * getGrayValue(data, x, y+1, width) +  1 * getGrayValue(data, x+1, y+1, width);
           }
         }
         
         // Harris response
         for (let y = 2; y < height - 2; y++) {
           for (let x = 2; x < width - 2; x++) {
             let A = 0, B = 0, C = 0;
             
             // 5x5 window
             for (let dy = -2; dy <= 2; dy++) {
               for (let dx = -2; dx <= 2; dx++) {
                 const idx = (y + dy) * width + (x + dx);
                 A += Ix[idx] * Ix[idx];
                 B += Ix[idx] * Iy[idx];
                 C += Iy[idx] * Iy[idx];
               }
             }
             
             const k = 0.04;
             const det = A * C - B * B;
             const trace = A + C;
             const response = det - k * trace * trace;
             
             if (response > threshold) {
               corners.push({ x, y, response });
             }
           }
         }
         
         return corners.sort((a, b) => b.response - a.response).slice(0, 100); // Top 100 corners
       }

       function matchFeaturePoints(corners1, corners2) {
         if (corners1.length === 0 || corners2.length === 0) return 0;
         
         let matches = 0;
         const maxDistance = 20; // Max pixel distance for a match
         
         for (const corner1 of corners1) {
           for (const corner2 of corners2) {
             const dx = corner1.x - corner2.x;
             const dy = corner1.y - corner2.y;
             const distance = Math.sqrt(dx * dx + dy * dy);
             
             if (distance < maxDistance) {
               matches++;
               break; // Found a match for this corner
             }
           }
         }
         
         return matches / Math.max(corners1.length, corners2.length);
       }

       // Phase Correlation Helper Functions
       function getGrayscaleData(ctx, width, height) {
         const imageData = ctx.getImageData(0, 0, width, height);
         const data = imageData.data;
         const gray = new Float32Array(width * height);
         
         for (let i = 0; i < width * height; i++) {
           const pixelIdx = i * 4;
           gray[i] = data[pixelIdx] * 0.299 + data[pixelIdx + 1] * 0.587 + data[pixelIdx + 2] * 0.114;
         }
         
         return gray;
       }

       function rotateImageData(data, width, height, angleDegrees) {
         const rotated = new Float32Array(width * height);
         const xOffset = (angleDegrees / 360) * width;
         const normalizedOffset = ((xOffset % width) + width) % width;
         
         for (let y = 0; y < height; y++) {
           for (let x = 0; x < width; x++) {
             const sourceX = (x + normalizedOffset) % width;
             const sourceIdx = y * width + Math.floor(sourceX);
             const targetIdx = y * width + x;
             rotated[targetIdx] = data[sourceIdx] || 0;
           }
         }
         
         return rotated;
       }

       function calculateNormalizedCrossCorrelation(data1, data2) {
         let sum1 = 0, sum2 = 0, sum12 = 0;
         let sumSq1 = 0, sumSq2 = 0;
         const length = data1.length;
         
         for (let i = 0; i < length; i++) {
           sum1 += data1[i];
           sum2 += data2[i];
           sum12 += data1[i] * data2[i];
           sumSq1 += data1[i] * data1[i];
           sumSq2 += data2[i] * data2[i];
         }
         
         const mean1 = sum1 / length;
         const mean2 = sum2 / length;
         
         const numerator = sum12 - length * mean1 * mean2;
         const denominator = Math.sqrt((sumSq1 - length * mean1 * mean1) * (sumSq2 - length * mean2 * mean2));
         
                 return denominator !== 0 ? numerator / denominator : 0;
      }

      // Edge overlay functions
      function showEdgeOverlays() {
        if (!referenceImage || !editImage) return;

        const edgeMethod = (document.getElementById('edge-method') as HTMLSelectElement).value;
        
        // Create overlay canvases
        createEdgeOverlay(referenceCanvas, referenceCtx, referenceImage, 'reference-edge-overlay', edgeMethod);
        createEdgeOverlay(editCanvas, editCtx, editImage, 'edit-edge-overlay', edgeMethod);
      }

      function hideEdgeOverlays() {
        // Remove existing overlays
        const refOverlay = document.getElementById('reference-edge-overlay');
        const editOverlay = document.getElementById('edit-edge-overlay');
        
        if (refOverlay) refOverlay.remove();
        if (editOverlay) editOverlay.remove();
      }

      function createEdgeOverlay(baseCanvas, baseCtx, image, overlayId, edgeMethod) {
        // Remove existing overlay first
        const existingOverlay = document.getElementById(overlayId);
        if (existingOverlay) existingOverlay.remove();

        // Create overlay canvas
        const overlay = document.createElement('canvas');
        overlay.id = overlayId;
        overlay.width = baseCanvas.width;
        overlay.height = baseCanvas.height;
        overlay.style.position = 'absolute';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.pointerEvents = 'none';
        overlay.style.zIndex = '10';
        
        const overlayCtx = overlay.getContext('2d');
        
        // Generate edge map
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = baseCanvas.width;
        tempCanvas.height = baseCanvas.height;
        const tempCtx = tempCanvas.getContext('2d');
        tempCtx.drawImage(image, 0, 0, tempCanvas.width, tempCanvas.height);
        
        const edges = detectEdges(tempCtx, tempCanvas.width, tempCanvas.height, edgeMethod);
        
        // Draw edges on overlay
        const imageData = overlayCtx.createImageData(overlay.width, overlay.height);
        const data = imageData.data;
        
        // Set overlay color based on canvas (red for reference, cyan for edit)
        const isReference = overlayId.includes('reference');
        const edgeColor = isReference ? [255, 0, 0, 180] : [0, 255, 255, 180]; // Red or Cyan with transparency
        
        // Find max edge strength for normalization
        let maxEdge = 0;
        for (let i = 0; i < edges.length; i++) {
          if (edges[i] > maxEdge) maxEdge = edges[i];
        }
        
        for (let i = 0; i < edges.length; i++) {
          const edgeStrength = edges[i];
          // For blurred edges, use a lower threshold and normalize
          if (edgeStrength > maxEdge * 0.1) { // 10% of max edge strength
            const pixelIdx = i * 4;
            const intensity = Math.min(255, (edgeStrength / maxEdge) * 255);
            data[pixelIdx] = (edgeColor[0] * intensity) / 255;     // R
            data[pixelIdx + 1] = (edgeColor[1] * intensity) / 255; // G
            data[pixelIdx + 2] = (edgeColor[2] * intensity) / 255; // B
            data[pixelIdx + 3] = edgeColor[3]; // A (constant transparency)
          }
        }
        
        overlayCtx.putImageData(imageData, 0, 0);
        
        // Add overlay to the canvas container
        baseCanvas.parentElement.appendChild(overlay);
      }

       // Function to recursively extract files from directory entries
      async function extractFilesFromEntry(entry, basePath = '') {
        const files = [];
        
        if (entry.isFile) {
          // If it's a file, convert to File object and store path info
          const file = await new Promise((resolve, reject) => {
            entry.file(resolve, reject);
          });
          
          // Add path information to the file object
          const relativePath = basePath ? `${basePath}/${entry.name}` : entry.name;
          (file as any).relativePath = relativePath;
          files.push(file);
        } else if (entry.isDirectory) {
          // If it's a directory, read all entries recursively
          const dirReader = entry.createReader();
          const entries = await readAllDirectoryEntries(dirReader);
          
          const currentPath = basePath ? `${basePath}/${entry.name}` : entry.name;
          
          for (const childEntry of entries) {
            const childFiles = await extractFilesFromEntry(childEntry, currentPath);
            files.push(...childFiles);
          }
        }
        
        return files;
      }

      // Helper function to read all entries from a directory reader
      function readAllDirectoryEntries(directoryReader) {
        return new Promise((resolve, reject) => {
          const entries = [];
          
          function readEntries() {
            directoryReader.readEntries((results) => {
              if (results.length === 0) {
                // No more entries
                resolve(entries);
              } else {
                entries.push(...Array.from(results));
                // Continue reading (there might be more entries)
                readEntries();
              }
            }, reject);
          }
          
          readEntries();
        });
      }
    </script>
  </body>
</html>