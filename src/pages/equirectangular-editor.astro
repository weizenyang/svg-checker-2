<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Equirectangular Image Editor</title>
    <style pre-load>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        color: #333;
      }
      h1 {
        text-align: center;
        margin-bottom: 20px;
      }
      .container {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
      .drop-area {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 3px dashed #ccc;
        border-radius: 10px;
        display: none; /* Hidden by default */
        align-items: center;
        justify-content: center;
        text-align: center;
        background-color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s ease;
        cursor: pointer;
        z-index: 10;
      }
      .drop-area.highlight {
        border-color: #4a90e2;
        background-color: rgba(240, 247, 255, 0.9);
      }
      .drop-area.show {
        display: flex;
      }
      .drop-area p {
        margin: 0;
        font-size: 1.2rem;
        color: #666;
      }
      .image-section {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      .image-section h2 {
        margin: 0;
      }
      .canvas-container {
        position: relative;
        width: 100%;
        height: 512px;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
        background-color: #eee;
      }
      canvas {
        width: 100%;
        height: 100%;
        cursor: grab;
      }
      canvas:active {
        cursor: grabbing;
      }
      .controls {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding: 15px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .rotation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .lock-controls {
        display: flex;
        gap: 15px;
      }
      .lock-option {
        display: flex;
        align-items: center;
        gap: 5px;
      }
      .rotation-input {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
      }
      .rotation-input input {
        width: 70px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: right;
      }
      .rotation-slider {
        position: relative;
        width: 100%;
        height: 50px;
        border: 1px solid #ddd;
        border-radius: 25px;
        overflow: hidden;
        background-color: #f9f9f9;
        margin-bottom: 10px;
      }
      .rotation-indicator {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: red;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2;
      }
      .rotation-ticks {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        transition: transform 0.1s ease;
        justify-content: space-evenly;
      }
      .tick {
        position: absolute;
        height: 30px;
        width: 1px;
        background-color: #ccc;
      }
      .tick.major {
        height: 40px;
        width: 2px;
        background-color: #333;
      }
      .tick-label {
        position: absolute;
        top: 45px;
        width: 10px;
        transform: translateX(-50%);
        font-size: 12px;
        color: #666;
      }
      .buttons {
        display: flex;
        gap: 10px;
        margin-top: 10px;
      }
      button {
        padding: 10px 20px;
        background-color: #4a90e2;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.2s;
      }
      button:hover {
        background-color: #357abD;
      }
      button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
      .export-button {
        background-color: #4CAF50;
      }
      .export-button:hover {
        background-color: #3e8e41;
      }
      .reset-button {
        background-color: #f44336;
      }
      .reset-button:hover {
        background-color: #d32f2f;
      }
      .center-line {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 50%;
        width: 2px;
        background-color: red;
        pointer-events: none; /* allows clicking through to canvas */
        z-index: 5;
      }
      .hover-indicator {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: #ffff00;
        pointer-events: none;
        z-index: 6;
        display: none;
      }
      .degree-display {
        position: absolute;
        bottom: -25px;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 12px;
        pointer-events: none;
        z-index: 7;
        display: none;
      }
      .tabs {
        display: flex;
        border-bottom: 2px solid #ddd;
        margin-bottom: 20px;
      }
      .tab {
        padding: 12px 24px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-bottom: none;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.2s;
      }
      .tab:hover {
        background-color: #e9e9e9;
      }
      .tab.active {
        background-color: white;
        border-top: 3px solid #4a90e2;
      }
      .tab-content {
        display: none;
      }
      .tab-content.active {
        display: block;
      }
      .batch-upload {
        border: 2px dashed #ddd;
        border-radius: 8px;
        padding: 40px;
        text-align: center;
        background-color: #fafafa;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .batch-upload:hover, .batch-upload.dragover {
        border-color: #4a90e2;
        background-color: #f0f7ff;
      }
      .file-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin: 15px 0;
      }
      .file-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
      }
      .file-item:last-child {
        border-bottom: none;
      }
      .file-name {
        font-weight: bold;
        flex-grow: 1;
      }
      .file-size {
        color: #666;
        font-size: 0.9em;
        margin-right: 10px;
      }
      .remove-file {
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 3px;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 0.8em;
      }
      .remove-file:hover {
        background-color: #d32f2f;
      }
      .batch-controls {
        display: flex;
        gap: 15px;
        align-items: center;
        margin: 20px 0;
      }
      .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
        margin: 15px 0;
        display: none;
      }
      .progress-fill {
        height: 100%;
        background-color: #4a90e2;
        transition: width 0.3s ease;
        width: 0%;
      }
    </style>
  </head>
  <body>
    <div class="flex align-center text-center">
        <a
        href="/"
        class="flex w-fit border-2 pl-2 pr-2 p-1 text-center rounded-md content-center hover:bg-neutral-100"
    >
        <div class="align-center content-center">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="size-5"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"
                ></path>
            </svg>
        </div>
    
        <p class="ml-2">Home</p>
    </a>
        <h1 class="!m-0 pl-2 text-center align-center align-middle self-center">Equirectangular Image Editor</h1>
    </div>
    
    
    <div class="container">
      <!-- Tab Navigation -->
      <div class="tabs">
        <div class="tab active" data-tab="single">Single Image Editor</div>
        <div class="tab" data-tab="batch">Batch Rotation</div>
      </div>

      <!-- Single Image Editor Tab -->
      <div id="single-tab" class="tab-content active">
        <div class="image-section">
          <h2>Reference Image</h2>
          <div class="canvas-container">
            <div id="reference-drop" class="drop-area">
              <p>Drag & drop reference image here or click to select</p>
            </div>
            <canvas id="reference-canvas"></canvas>
            <div class="center-line"></div>
            <div id="reference-hover-line" class="hover-indicator"></div>
            <div id="reference-degree-display" class="degree-display"></div>
          </div>
        </div>

        <div class="image-section">
          <h2>Image to Edit</h2>
          <div class="canvas-container">
            <div id="edit-drop" class="drop-area">
              <p>Drag & drop image to edit here or click to select</p>
            </div>
            <canvas id="edit-canvas"></canvas>
            <div class="center-line"></div>
            <div id="edit-hover-line" class="hover-indicator"></div>
            <div id="edit-degree-display" class="degree-display"></div>
          </div>
        </div>

        <div class="controls">
          <div class="rotation-header">
            <h3 style="margin: 0;">Rotation Controls</h3>
            <div class="lock-controls">
              <label class="lock-option">
                <input type="checkbox" id="lock-longitude"> Lock Longitude
              </label>
              <label class="lock-option">
                <input type="checkbox" id="lock-latitude" checked> Lock Latitude
              </label>
            </div>
          </div>
          
          <div class="rotation-input">
            <span>Longitude:</span>
            <div>
              <input type="number" id="longitude-input" value="0.0" step="0.1" min="-180" max="180">
              <span>°</span>
            </div>
            <div>
              <p id="longitude-offset-display"></p>
              <span>px</span>
            </div>
          </div>
          
          <div class="rotation-slider">
            <div class="rotation-indicator"></div>
            <div id="rotation-ticks" class="rotation-ticks"></div>
          </div>
          
          <div class="rotation-input">
            <span>Latitude:</span>
            <div>
              <input type="number" id="latitude-input" value="0.0" step="0.1" min="-90" max="90">
              <span>°</span>
            </div>
            <div>
              <p id="latitude-offset-display"></p>
              <span>px</span>
            </div>
          </div>
          
          <div class="rotation-input">
            <span>Export Filename:</span>
            <div>
              <input type="text" id="filename-input" placeholder="Enter filename..." style="width: 200px;">
            </div>
          </div>
          
          <div class="buttons">
            <button id="reset-button" class="reset-button" disabled>Reset Rotation</button>
            <button id="export-button" class="export-button" disabled>Export Image</button>
          </div>
        </div>
      </div>

      <!-- Batch Rotation Tab -->
      <div id="batch-tab" class="tab-content">
        <div class="image-section">
          <h2>Batch Image Upload</h2>
          <div id="batch-upload" class="batch-upload">
            <p><strong>Drop multiple images here or click to select</strong></p>
            <p>Supports JPG, PNG, and other image formats</p>
            <input type="file" id="batch-file-input" multiple accept="image/*" style="display: none;">
          </div>
          
          <div id="batch-file-list" class="file-list" style="display: none;">
            <!-- File list will be populated here -->
          </div>
        </div>

        <div class="controls">
          <div class="rotation-header">
            <h3 style="margin: 0;">Batch Rotation Settings</h3>
          </div>
          
          <div class="batch-controls">
            <label>
              <span>Rotation Degrees:</span>
              <input type="number" id="batch-rotation-input" value="0" step="0.1" min="-180" max="180" style="width: 100px; margin-left: 10px;">
              <span>°</span>
            </label>
            
            <label>
              <span>Output Prefix:</span>
              <input type="text" id="batch-prefix-input" placeholder="rotated_" style="width: 120px; margin-left: 10px;">
            </label>
          </div>
          
          <div class="progress-bar" id="batch-progress-bar">
            <div class="progress-fill" id="batch-progress-fill"></div>
          </div>
          
          <div class="buttons">
            <button id="batch-clear-button" class="reset-button" disabled>Clear All</button>
            <button id="batch-process-button" class="export-button" disabled>Process & Download All</button>
          </div>
        </div>
      </div>
    </div>
    
    <script>
import { imageConfig } from "astro:assets";

      // Global variables
      let referenceImage = null;
      let editImage = null;
      let longitudeRotation = 0; // degrees
      let latitudeRotation = 0;  // degrees
      let longitudeOffset = 0; // degrees
      let latitudeOffset = 0;  // degrees
      let isDragging = false;
      let lastMouseX = 0;
      let lastMouseY = 0;
      let lockLongitude = false;
      let lockLatitude = true; // Locked by default
      let imageSize = {width: 0, height: 0}
      
      // DOM Elements
      const referenceCanvas = document.getElementById('reference-canvas');
      const editCanvas = document.getElementById('edit-canvas');
      const referenceCtx = referenceCanvas.getContext('2d');
      const editCtx = editCanvas.getContext('2d');
      const rotationTicksEl = document.getElementById('rotation-ticks');
      const resetButton = document.getElementById('reset-button');
      const exportButton = document.getElementById('export-button');
      const lockLongitudeCheckbox = document.getElementById('lock-longitude');
      const lockLatitudeCheckbox = document.getElementById('lock-latitude');
      const longitudeInput = document.getElementById('longitude-input');
      const latitudeInput = document.getElementById('latitude-input');
      const longitudeOffsetDisplay = document.getElementById('longitude-offset-display');
      const latitudeOffsetDisplay = document.getElementById('latitude-offset-display');
      const filenameInput = document.getElementById('filename-input');
      
      // Hover indicator elements
      const referenceHoverLine = document.getElementById('reference-hover-line');
      const editHoverLine = document.getElementById('edit-hover-line');
      const referenceDegreeDisplay = document.getElementById('reference-degree-display');
      const editDegreeDisplay = document.getElementById('edit-degree-display');

      // Set up drop areas
      setupDropArea('reference-drop', loadReferenceImage);
      setupDropArea('edit-drop', loadEditImage);
      
      // Initially show drop areas for empty canvases
      document.getElementById('reference-drop').classList.add('show');
      document.getElementById('edit-drop').classList.add('show');
      
      // Set up drag events on canvas containers to show drop areas
      document.querySelectorAll('.canvas-container').forEach(container => {
        container.addEventListener('dragenter', function(e) {
          e.preventDefault();
          const dropArea = container.querySelector('.drop-area');
          dropArea.classList.add('show');
        });
        
        container.addEventListener('dragleave', function(e) {
          e.preventDefault();
          // Only hide if we're leaving the container entirely
          if (!container.contains(e.relatedTarget)) {
            const dropArea = container.querySelector('.drop-area');
            dropArea.classList.remove('show');
          }
        });
        
        container.addEventListener('dragover', function(e) {
          e.preventDefault();
        });
        
        container.addEventListener('drop', function(e) {
          e.preventDefault();
          const dropArea = container.querySelector('.drop-area');
          dropArea.classList.remove('show');
        });
      });
      
      // Canvas initialization
      function initCanvas(canvas) {
        const container = canvas.parentElement;
        canvas.width = container.offsetWidth;
        canvas.height = container.offsetHeight;
      }
      
      // Initialize canvases
      initCanvas(referenceCanvas);
      initCanvas(editCanvas);
      
      // Create rotation tick marks
      createRotationTicks();
      
      // Set up event listeners
      window.addEventListener('resize', handleResize);
      editCanvas.addEventListener('mousedown', handleMouseDown);
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      resetButton.addEventListener('click', resetRotation);
      exportButton.addEventListener('click', exportImage);
      lockLongitudeCheckbox.addEventListener('change', function() {
        lockLongitude = this.checked;
      });
      lockLatitudeCheckbox.addEventListener('change', function() {
        lockLatitude = this.checked;
      });
      longitudeInput.addEventListener('change', function() {
        longitudeRotation = parseFloat(this.value);
        longitudeOffset = longitudeRotation * imageSize.width / 360
        updateRotationDisplay();
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      });
      latitudeInput.addEventListener('change', function() {
        latitudeRotation = parseFloat(this.value);
        latitudeOffset = latitudeRotation * imageSize.width / 360
        updateRotationDisplay();
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      });
      
      // Mouse hover event listeners for degree display
      referenceCanvas.addEventListener('mousemove', handleCanvasHover);
      editCanvas.addEventListener('mousemove', handleCanvasHover);
      referenceCanvas.addEventListener('mouseleave', hideHoverIndicators);
      editCanvas.addEventListener('mouseleave', hideHoverIndicators);
      
      function handleCanvasHover(e) {
        const rect = e.target.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const canvasWidth = rect.width;
        
        // Calculate degree (0-360) based on mouse position
        const degree = (x / canvasWidth) * 360;
        
        // Show hover lines on both canvases at the same position
        const leftPercent = (x / canvasWidth) * 100;
        
        referenceHoverLine.style.left = leftPercent + '%';
        editHoverLine.style.left = leftPercent + '%';
        referenceDegreeDisplay.style.left = leftPercent + '%';
        editDegreeDisplay.style.left = leftPercent + '%';
        
        // Update degree text
        const degreeText = degree.toFixed(1) + '°';
        referenceDegreeDisplay.textContent = degreeText;
        editDegreeDisplay.textContent = degreeText;
        
        // Show indicators
        referenceHoverLine.style.display = 'block';
        editHoverLine.style.display = 'block';
        referenceDegreeDisplay.style.display = 'block';
        editDegreeDisplay.style.display = 'block';
      }
      
      function hideHoverIndicators() {
        referenceHoverLine.style.display = 'none';
        editHoverLine.style.display = 'none';
        referenceDegreeDisplay.style.display = 'none';
        editDegreeDisplay.style.display = 'none';
      }
      
      function setupDropArea(id, callback) {
        const dropArea = document.getElementById(id);
        const highlight = () => dropArea.classList.add('highlight');
        const unhighlight = () => dropArea.classList.remove('highlight');
        
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, preventDefaults, false);
        });
        
        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
          dropArea.addEventListener(eventName, highlight, false);
        });
        
        // Unhighlight when dragged item leaves or is dropped
        ['dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, unhighlight, false);
        });
        
        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);
        
        // Handle click to select files
        dropArea.addEventListener('click', () => {
          const input = document.createElement('input');
          input.type = 'file';
          input.accept = 'image/*';
          input.onchange = (e) => {
            if (e.target.files.length) {
              processFile(e.target.files[0], callback);
            }
          };
          input.click();
        });
        
        function handleDrop(e) {
          const dt = e.dataTransfer;
          const files = dt.files;
          
          if (files.length) {
            processFile(files[0], callback);
          }
        }
      }
      
      function processFile(file, callback) {
        if (file.type.match('image.*')) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
            const img = new Image();
            img.onload = function() {
              callback(img, file.name);
            };
            img.src = e.target.result;
            imageSize.width = img.width
            imageSize.height = img.height
          };
          
          reader.readAsDataURL(file);
        }
      }
      
      function loadReferenceImage(img, filename) {
        referenceImage = img;
        drawImage(referenceCtx, img);
        // Hide drop area after image is loaded - it will show again during drag events
        document.getElementById('reference-drop').classList.remove('show');
      }
      
      function loadEditImage(img, filename) {
        editImage = img;
        // Set the filename in the input field (remove extension)
        if (filename) {
          const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
          filenameInput.value = nameWithoutExt;
        }
        drawImage(editCtx, img, longitudeRotation, latitudeRotation);
        resetButton.disabled = false;
        exportButton.disabled = false;
        // Hide drop area after image is loaded - it will show again during drag events
        document.getElementById('edit-drop').classList.remove('show');
      }
      
      function drawImage(ctx, img, lonRotation = 0, latRotation = 0) {
        if (!img) return;
        
        const canvas = ctx.canvas;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Normalize the horizontal offset
        let xOffset = (lonRotation / 360) * img.width;
        xOffset = ((xOffset % img.width) + img.width) % img.width;
        
        const yOffset = (latRotation / 180) * img.height;
        
        // Determine scale factor from source image width to canvas width
        const scale = canvas.width / img.width;
        
        // Calculate available width from xOffset to the image end
        const availableWidth = img.width - xOffset;
        const destWidthFirst = availableWidth * scale;
        
        // Draw the right segment of the image
        ctx.drawImage(
            img,
            xOffset, yOffset, availableWidth, img.height,
            0, 0, destWidthFirst, canvas.height
        );
        
        // If the first segment doesn't fill the canvas, draw the left segment of the image
        if (destWidthFirst < canvas.width) {
            const remainingDestWidth = canvas.width - destWidthFirst;
            const remainingSrcWidth = remainingDestWidth / scale;
            ctx.drawImage(
            img,
            0, yOffset, remainingSrcWidth, img.height,
            destWidthFirst, 0, remainingDestWidth, canvas.height
            );
        }
        }
      
      function handleResize() {
        initCanvas(referenceCanvas);
        initCanvas(editCanvas);
        
        if (referenceImage) {
          drawImage(referenceCtx, referenceImage);
        }
        
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      }
      
      function handleMouseDown(e) {
        if (!editImage) return;
        
        isDragging = true;
        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
        editCanvas.style.cursor = 'grabbing';
      }
      
      function handleMouseMove(e) {
        if (!isDragging) return;
        
        const deltaX = e.clientX - lastMouseX;
        const deltaY = e.clientY - lastMouseY;
        
        // Update rotation based on mouse movement only if not locked
        if (!lockLongitude) {
          // Calculate sensitivity based on canvas width to make movement feel natural
          const canvasWidth = editCanvas.offsetWidth;
          const sensitivity = 360 / canvasWidth; // 1 pixel = degrees based on canvas size
          longitudeRotation -= deltaX * sensitivity;
          // Keep longitude in range -180 to 180
          longitudeOffset = longitudeRotation * imageSize.width / 360
          longitudeRotation = ((longitudeRotation + 180) % 360) - 180;
        }
        
        if (!lockLatitude) {
          // Calculate sensitivity based on canvas height
          const canvasHeight = editCanvas.offsetHeight;
          const sensitivity = 180 / canvasHeight; // 1 pixel = degrees based on canvas size
          latitudeRotation += deltaY * sensitivity;
          // Limit latitude to -90 to 90
          latitudeOffset = latitudeRotation * imageSize.width / 360
          latitudeRotation = Math.max(-90, Math.min(90, latitudeRotation));
        }
        
        // Update the display
        updateRotationDisplay();
        
        // Redraw image with new rotation
        drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        
        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
      }
      
      function handleMouseUp() {
        isDragging = false;
        editCanvas.style.cursor = 'grab';
      }
      
      function createRotationTicks() {
        // Create tick marks for the rotation slider
        rotationTicksEl.innerHTML = '';
        
        // Create ticks for +/- 180 degrees
        for (let i = -180; i <= 180; i += 10) {
          const tick = document.createElement('div');
          tick.className = i % 30 === 0 ? 'tick major' : 'tick';
          
          // Position the tick
          const percent = ((i + 180) / 360) * 100;
          tick.style.left = `${percent}%`;
          
          rotationTicksEl.appendChild(tick);
          
          // Add label for major ticks
          if (i % 30 === 0) {
            const label = document.createElement('div');
            label.className = 'tick-label';
            label.style.left = `${percent}%`;
            label.textContent = i + '°';
            label.style.width = "150px"
            label.style.left = "0px"
            label.style.textAlign = "center"
            label.style.position = "relative"
            rotationTicksEl.appendChild(label);
          }
        }
      }
      
      function updateRotationDisplay() {
        // Update the input fields
        longitudeInput.value = longitudeRotation.toFixed(1);
        latitudeInput.value = latitudeRotation.toFixed(1);
        longitudeOffsetDisplay.innerHTML = longitudeOffset.toFixed(1);
        latitudeOffsetDisplay.innerHTML = latitudeOffset.toFixed(1);
        
        // Update the rotation ticks position for longitude
        const ticksOffset = ((longitudeRotation + 180) / 360) * 100;
        rotationTicksEl.style.transform = `translateX(${50 - ticksOffset}%)`;
      }
      
      function resetRotation() {
        longitudeRotation = 0;
        latitudeRotation = 0;
        updateRotationDisplay();
        
        if (editImage) {
          drawImage(editCtx, editImage, longitudeRotation, latitudeRotation);
        }
      }
      
      function exportImage() {
        if (!editImage) return;
        
        // Create a temporary canvas for the export
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = editImage.width;
        tempCanvas.height = editImage.height;
        const tempCtx = tempCanvas.getContext('2d');
        
        // Apply the rotation to the original image
        const xOffset = (longitudeRotation / 360) * editImage.width;
        const yOffset = (latitudeRotation / 180) * editImage.height;
        
        tempCtx.drawImage(
          editImage, 
          xOffset, yOffset, editImage.width, editImage.height, 
          0, 0, tempCanvas.width, tempCanvas.height
        );
        tempCtx.drawImage(
          editImage, 
          xOffset - editImage.width, yOffset, editImage.width, editImage.height, 
          0, 0, tempCanvas.width, tempCanvas.height
        );
        
        // Create a download link with custom filename
        const filename = filenameInput.value || 'rotated-equirectangular';
        const link = document.createElement('a');
        link.download = filename + '.png';
        link.href = tempCanvas.toDataURL('image/png');
        link.click();
      }
      
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      // Tab functionality
      let batchFiles = [];
      
      // Set up tab switching
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabName = this.getAttribute('data-tab');
          
          // Remove active class from all tabs and contents
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
          
          // Add active class to clicked tab and corresponding content
          this.classList.add('active');
          document.getElementById(tabName + '-tab').classList.add('active');
        });
      });

      // Batch upload functionality
      const batchUpload = document.getElementById('batch-upload');
      const batchFileInput = document.getElementById('batch-file-input');
      const batchFileList = document.getElementById('batch-file-list');
      const batchClearButton = document.getElementById('batch-clear-button');
      const batchProcessButton = document.getElementById('batch-process-button');
      const batchProgressBar = document.getElementById('batch-progress-bar');
      const batchProgressFill = document.getElementById('batch-progress-fill');
      const batchRotationInput = document.getElementById('batch-rotation-input');
      const batchPrefixInput = document.getElementById('batch-prefix-input');

      // Set up batch upload area
      batchUpload.addEventListener('click', () => {
        batchFileInput.click();
      });

      batchUpload.addEventListener('dragover', (e) => {
        e.preventDefault();
        batchUpload.classList.add('dragover');
      });

      batchUpload.addEventListener('dragleave', (e) => {
        e.preventDefault();
        batchUpload.classList.remove('dragover');
      });

      batchUpload.addEventListener('drop', (e) => {
        e.preventDefault();
        batchUpload.classList.remove('dragover');
        const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
        addBatchFiles(files);
      });

      batchFileInput.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        addBatchFiles(files);
      });

      function addBatchFiles(files) {
        files.forEach(file => {
          if (!batchFiles.find(f => f.name === file.name && f.size === file.size)) {
            batchFiles.push(file);
          }
        });
        updateBatchFileList();
      }

      function updateBatchFileList() {
        if (batchFiles.length === 0) {
          batchFileList.style.display = 'none';
          (batchClearButton as HTMLButtonElement).disabled = true;
          (batchProcessButton as HTMLButtonElement).disabled = true;
          return;
        }

        batchFileList.style.display = 'block';
        (batchClearButton as HTMLButtonElement).disabled = false;
        (batchProcessButton as HTMLButtonElement).disabled = false;

        batchFileList.innerHTML = '';
        batchFiles.forEach((file, index) => {
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          
          const fileName = document.createElement('span');
          fileName.className = 'file-name';
          fileName.textContent = file.name;
          
          const fileSize = document.createElement('span');
          fileSize.className = 'file-size';
          fileSize.textContent = formatFileSize(file.size);
          
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-file';
          removeBtn.textContent = 'Remove';
          removeBtn.addEventListener('click', () => {
            batchFiles.splice(index, 1);
            updateBatchFileList();
          });
          
          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fileItem.appendChild(removeBtn);
          batchFileList.appendChild(fileItem);
        });
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }

      batchClearButton.addEventListener('click', () => {
        batchFiles = [];
        updateBatchFileList();
      });

      batchProcessButton.addEventListener('click', async () => {
        if (batchFiles.length === 0) return;

        const rotationDegrees = parseFloat(batchRotationInput.value) || 0;
        const prefix = batchPrefixInput.value || 'rotated_';
        
                 // Show progress bar
         batchProgressBar.style.display = 'block';
         (batchProcessButton as HTMLButtonElement).disabled = true;
         (batchClearButton as HTMLButtonElement).disabled = true;

         // Create JSZip instance for batch download
         const JSZip = (await import('https://cdn.skypack.dev/jszip')).default;
         const zip = new JSZip();

         for (let i = 0; i < batchFiles.length; i++) {
           const file = batchFiles[i];
           const progress = ((i + 1) / batchFiles.length) * 100;
           
           // Update progress bar
           batchProgressFill.style.width = progress + '%';
           
           try {
             // Load image
             const img = await loadImageFromFile(file) as HTMLImageElement;
             
             // Create canvas and apply rotation
             const canvas = document.createElement('canvas');
             canvas.width = img.width;
             canvas.height = img.height;
             const ctx = canvas.getContext('2d');
             
             // Apply rotation
             const xOffset = (rotationDegrees / 360) * img.width;
             const normalizedXOffset = ((xOffset % img.width) + img.width) % img.width;
             const availableWidth = img.width - normalizedXOffset;
             
             // Draw the rotated image
             ctx.drawImage(
               img,
               normalizedXOffset, 0, availableWidth, img.height,
               0, 0, availableWidth, img.height
             );
             
             if (availableWidth < img.width) {
               const remainingWidth = img.width - availableWidth;
               ctx.drawImage(
                 img,
                 0, 0, remainingWidth, img.height,
                 availableWidth, 0, remainingWidth, img.height
               );
             }
            
            // Convert to blob and add to zip
            const blob = await new Promise(resolve => {
              canvas.toBlob(resolve, 'image/png');
            });
            
            const fileName = prefix + file.name.replace(/\.[^/.]+$/, '') + '.png';
            zip.file(fileName, blob);
            
          } catch (error) {
            console.error('Error processing file:', file.name, error);
          }
        }

        // Generate and download zip file
        try {
          const content = await zip.generateAsync({ type: 'blob' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(content);
          link.download = 'batch_rotated_images.zip';
          link.click();
          URL.revokeObjectURL(link.href);
        } catch (error) {
          console.error('Error creating zip file:', error);
        }

                 // Reset UI
         batchProgressBar.style.display = 'none';
         batchProgressFill.style.width = '0%';
         (batchProcessButton as HTMLButtonElement).disabled = false;
         (batchClearButton as HTMLButtonElement).disabled = false;
      });

      function loadImageFromFile(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = reject;
            img.src = e.target.result;
          };
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
      }
    </script>
  </body>
</html>